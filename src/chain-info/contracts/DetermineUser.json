{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "privateKeyNRO",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "privateKeyCIA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "privateKeyNSA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "privateKeyAWS",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "enum DetermineUser.UserType",
          "name": "selectionNumType",
          "type": "uint8"
        },
        {
          "internalType": "enum DetermineUser.OrgName",
          "name": "selectionNumOrg",
          "type": "uint8"
        }
      ],
      "name": "addPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_newprivateKeyNRO",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_newprivateKeyCIA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_newprivateKeyNSA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_newprivateKeyAWS",
          "type": "address[]"
        }
      ],
      "name": "changePrivateKeys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usersPrivateKey",
          "type": "address"
        },
        {
          "internalType": "enum DetermineUser.OrgName",
          "name": "selectionNumOrg",
          "type": "uint8"
        }
      ],
      "name": "checkOrgList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DetermineUser.OrgName",
          "name": "selectionNumOrg",
          "type": "uint8"
        },
        {
          "internalType": "enum DetermineUser.UserType",
          "name": "selectionNumType",
          "type": "uint8"
        }
      ],
      "name": "checkTypeList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameToOrganization",
      "outputs": [
        {
          "internalType": "enum DetermineUser.OrgName",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameToUserType",
      "outputs": [
        {
          "internalType": "enum DetermineUser.UserType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DetermineUser.OrgName",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orgnameToKey",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "people",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "enum DetermineUser.UserType",
          "name": "yourUserType",
          "type": "uint8"
        },
        {
          "internalType": "enum DetermineUser.OrgName",
          "name": "organization",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "people_list",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/yabubaker/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/access/Ownable.sol",
    "1": "/home/yabubaker/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/utils/Context.sol",
    "2": "contracts/DetermineUser.sol"
  },
  "ast": {
    "absolutePath": "contracts/DetermineUser.sol",
    "exportedSymbols": {
      "Context": [
        771
      ],
      "DetermineUser": [
        465
      ],
      "Ownable": [
        749
      ]
    },
    "id": 466,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "640:31:2"
      },
      {
        "absolutePath": "/home/yabubaker/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.1/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 466,
        "sourceUnit": 750,
        "src": "672:52:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 749,
              "src": "752:7:2"
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "752:7:2"
          }
        ],
        "canonicalName": "DetermineUser",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 465,
        "linearizedBaseContracts": [
          465,
          749,
          771
        ],
        "name": "DetermineUser",
        "nameLocation": "735:13:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 7,
            "mutability": "mutable",
            "name": "_privateKeyNRO",
            "nameLocation": "776:14:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "766:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 5,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "766:7:2",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 6,
              "nodeType": "ArrayTypeName",
              "src": "766:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 10,
            "mutability": "mutable",
            "name": "_privateKeyNSA",
            "nameLocation": "802:14:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "792:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 8,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "792:7:2",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 9,
              "nodeType": "ArrayTypeName",
              "src": "792:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 13,
            "mutability": "mutable",
            "name": "_privateKeyCIA",
            "nameLocation": "828:14:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "818:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 11,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "818:7:2",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 12,
              "nodeType": "ArrayTypeName",
              "src": "818:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 16,
            "mutability": "mutable",
            "name": "_privateKeyAWS",
            "nameLocation": "854:14:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "844:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 14,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "844:7:2",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 15,
              "nodeType": "ArrayTypeName",
              "src": "844:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 47,
              "nodeType": "Block",
              "src": "1011:238:2",
              "statements": [
                {
                  "expression": {
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 31,
                      "name": "_privateKeyNRO",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1092:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 32,
                      "name": "privateKeyNRO",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "1109:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "src": "1092:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 34,
                  "nodeType": "ExpressionStatement",
                  "src": "1092:30:2"
                },
                {
                  "expression": {
                    "id": 37,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 35,
                      "name": "_privateKeyNSA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10,
                      "src": "1132:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 36,
                      "name": "privateKeyNSA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25,
                      "src": "1149:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "src": "1132:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 38,
                  "nodeType": "ExpressionStatement",
                  "src": "1132:30:2"
                },
                {
                  "expression": {
                    "id": 41,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39,
                      "name": "_privateKeyCIA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13,
                      "src": "1172:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 40,
                      "name": "privateKeyCIA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22,
                      "src": "1189:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "src": "1172:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 42,
                  "nodeType": "ExpressionStatement",
                  "src": "1172:30:2"
                },
                {
                  "expression": {
                    "id": 45,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 43,
                      "name": "_privateKeyAWS",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16,
                      "src": "1212:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 44,
                      "name": "privateKeyAWS",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28,
                      "src": "1229:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "src": "1212:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 46,
                  "nodeType": "ExpressionStatement",
                  "src": "1212:30:2"
                }
              ]
            },
            "id": 48,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "mutability": "mutable",
                  "name": "privateKeyNRO",
                  "nameLocation": "903:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 48,
                  "src": "886:30:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 17,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "886:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 18,
                    "nodeType": "ArrayTypeName",
                    "src": "886:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 22,
                  "mutability": "mutable",
                  "name": "privateKeyCIA",
                  "nameLocation": "934:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 48,
                  "src": "917:30:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 20,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "917:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 21,
                    "nodeType": "ArrayTypeName",
                    "src": "917:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25,
                  "mutability": "mutable",
                  "name": "privateKeyNSA",
                  "nameLocation": "965:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 48,
                  "src": "948:30:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "948:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 24,
                    "nodeType": "ArrayTypeName",
                    "src": "948:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28,
                  "mutability": "mutable",
                  "name": "privateKeyAWS",
                  "nameLocation": "996:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 48,
                  "src": "979:30:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 26,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "979:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 27,
                    "nodeType": "ArrayTypeName",
                    "src": "979:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "885:125:2"
            },
            "returnParameters": {
              "id": 30,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1011:0:2"
            },
            "scope": 465,
            "src": "874:375:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "canonicalName": "DetermineUser.OrgName",
            "id": 54,
            "members": [
              {
                "id": 49,
                "name": "None",
                "nameLocation": "1269:4:2",
                "nodeType": "EnumValue",
                "src": "1269:4:2"
              },
              {
                "id": 50,
                "name": "NRO",
                "nameLocation": "1275:3:2",
                "nodeType": "EnumValue",
                "src": "1275:3:2"
              },
              {
                "id": 51,
                "name": "NSA",
                "nameLocation": "1280:3:2",
                "nodeType": "EnumValue",
                "src": "1280:3:2"
              },
              {
                "id": 52,
                "name": "CIA",
                "nameLocation": "1285:3:2",
                "nodeType": "EnumValue",
                "src": "1285:3:2"
              },
              {
                "id": 53,
                "name": "AWS",
                "nameLocation": "1290:3:2",
                "nodeType": "EnumValue",
                "src": "1290:3:2"
              }
            ],
            "name": "OrgName",
            "nameLocation": "1260:7:2",
            "nodeType": "EnumDefinition",
            "src": "1255:40:2"
          },
          {
            "constant": false,
            "id": 57,
            "mutability": "mutable",
            "name": "_orgName",
            "nameLocation": "1308:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "1300:16:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_OrgName_$54",
              "typeString": "enum DetermineUser.OrgName"
            },
            "typeName": {
              "id": 56,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 55,
                "name": "OrgName",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 54,
                "src": "1300:7:2"
              },
              "referencedDeclaration": 54,
              "src": "1300:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_OrgName_$54",
                "typeString": "enum DetermineUser.OrgName"
              }
            },
            "visibility": "internal"
          },
          {
            "canonicalName": "DetermineUser.UserType",
            "id": 63,
            "members": [
              {
                "id": 58,
                "name": "None",
                "nameLocation": "1338:4:2",
                "nodeType": "EnumValue",
                "src": "1338:4:2"
              },
              {
                "id": 59,
                "name": "User",
                "nameLocation": "1344:4:2",
                "nodeType": "EnumValue",
                "src": "1344:4:2"
              },
              {
                "id": 60,
                "name": "ProviderStorage",
                "nameLocation": "1349:15:2",
                "nodeType": "EnumValue",
                "src": "1349:15:2"
              },
              {
                "id": 61,
                "name": "ProviderCloud",
                "nameLocation": "1366:13:2",
                "nodeType": "EnumValue",
                "src": "1366:13:2"
              },
              {
                "id": 62,
                "name": "ProviderBoth",
                "nameLocation": "1381:12:2",
                "nodeType": "EnumValue",
                "src": "1381:12:2"
              }
            ],
            "name": "UserType",
            "nameLocation": "1328:8:2",
            "nodeType": "EnumDefinition",
            "src": "1323:71:2"
          },
          {
            "constant": false,
            "id": 66,
            "mutability": "mutable",
            "name": "_userType",
            "nameLocation": "1408:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "1399:18:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_UserType_$63",
              "typeString": "enum DetermineUser.UserType"
            },
            "typeName": {
              "id": 65,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 64,
                "name": "UserType",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 63,
                "src": "1399:8:2"
              },
              "referencedDeclaration": 63,
              "src": "1399:8:2",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_UserType_$63",
                "typeString": "enum DetermineUser.UserType"
              }
            },
            "visibility": "internal"
          },
          {
            "canonicalName": "DetermineUser.People",
            "id": 75,
            "members": [
              {
                "constant": false,
                "id": 68,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "1455:4:2",
                "nodeType": "VariableDeclaration",
                "scope": 75,
                "src": "1448:11:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 67,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1448:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 71,
                "mutability": "mutable",
                "name": "yourUserType",
                "nameLocation": "1478:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 75,
                "src": "1469:21:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_UserType_$63",
                  "typeString": "enum DetermineUser.UserType"
                },
                "typeName": {
                  "id": 70,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 69,
                    "name": "UserType",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 63,
                    "src": "1469:8:2"
                  },
                  "referencedDeclaration": 63,
                  "src": "1469:8:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_UserType_$63",
                    "typeString": "enum DetermineUser.UserType"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 74,
                "mutability": "mutable",
                "name": "organization",
                "nameLocation": "1508:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 75,
                "src": "1500:20:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_OrgName_$54",
                  "typeString": "enum DetermineUser.OrgName"
                },
                "typeName": {
                  "id": 73,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 72,
                    "name": "OrgName",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 54,
                    "src": "1500:7:2"
                  },
                  "referencedDeclaration": 54,
                  "src": "1500:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_OrgName_$54",
                    "typeString": "enum DetermineUser.OrgName"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "People",
            "nameLocation": "1431:6:2",
            "nodeType": "StructDefinition",
            "scope": 465,
            "src": "1424:103:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "9e7a13ad",
            "id": 79,
            "mutability": "mutable",
            "name": "people",
            "nameLocation": "1553:6:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "1537:22:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_People_$75_storage_$dyn_storage",
              "typeString": "struct DetermineUser.People[]"
            },
            "typeName": {
              "baseType": {
                "id": 77,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 76,
                  "name": "People",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 75,
                  "src": "1537:6:2"
                },
                "referencedDeclaration": 75,
                "src": "1537:6:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_People_$75_storage_ptr",
                  "typeString": "struct DetermineUser.People"
                }
              },
              "id": 78,
              "nodeType": "ArrayTypeName",
              "src": "1537:8:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_People_$75_storage_$dyn_storage_ptr",
                "typeString": "struct DetermineUser.People[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "d82b87dc",
            "id": 84,
            "mutability": "mutable",
            "name": "nameToUserType",
            "nameLocation": "1600:14:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "1565:49:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_enum$_UserType_$63_$",
              "typeString": "mapping(string => enum DetermineUser.UserType)"
            },
            "typeName": {
              "id": 83,
              "keyType": {
                "id": 80,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1573:6:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "1565:27:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_enum$_UserType_$63_$",
                "typeString": "mapping(string => enum DetermineUser.UserType)"
              },
              "valueType": {
                "id": 82,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 81,
                  "name": "UserType",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 63,
                  "src": "1583:8:2"
                },
                "referencedDeclaration": 63,
                "src": "1583:8:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_UserType_$63",
                  "typeString": "enum DetermineUser.UserType"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "7fa2bc74",
            "id": 89,
            "mutability": "mutable",
            "name": "nameToOrganization",
            "nameLocation": "1654:18:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "1620:52:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_enum$_OrgName_$54_$",
              "typeString": "mapping(string => enum DetermineUser.OrgName)"
            },
            "typeName": {
              "id": 88,
              "keyType": {
                "id": 85,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1628:6:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "1620:26:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_enum$_OrgName_$54_$",
                "typeString": "mapping(string => enum DetermineUser.OrgName)"
              },
              "valueType": {
                "id": 87,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 86,
                  "name": "OrgName",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 54,
                  "src": "1638:7:2"
                },
                "referencedDeclaration": 54,
                "src": "1638:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_OrgName_$54",
                  "typeString": "enum DetermineUser.OrgName"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "52d86539",
            "id": 95,
            "mutability": "mutable",
            "name": "orgnameToKey",
            "nameLocation": "1715:12:2",
            "nodeType": "VariableDeclaration",
            "scope": 465,
            "src": "1678:49:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
              "typeString": "mapping(enum DetermineUser.OrgName => address[])"
            },
            "typeName": {
              "id": 94,
              "keyType": {
                "id": 91,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 90,
                  "name": "OrgName",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 54,
                  "src": "1686:7:2"
                },
                "referencedDeclaration": 54,
                "src": "1686:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_OrgName_$54",
                  "typeString": "enum DetermineUser.OrgName"
                }
              },
              "nodeType": "Mapping",
              "src": "1678:29:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                "typeString": "mapping(enum DetermineUser.OrgName => address[])"
              },
              "valueType": {
                "baseType": {
                  "id": 92,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1697:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "id": 93,
                "nodeType": "ArrayTypeName",
                "src": "1697:9:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                  "typeString": "address[]"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 126,
              "nodeType": "Block",
              "src": "1770:321:2",
              "statements": [
                {
                  "expression": {
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 98,
                        "name": "orgnameToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 95,
                        "src": "1881:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                          "typeString": "mapping(enum DetermineUser.OrgName => address[] storage ref)"
                        }
                      },
                      "id": 101,
                      "indexExpression": {
                        "expression": {
                          "id": 99,
                          "name": "OrgName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "1894:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                            "typeString": "type(enum DetermineUser.OrgName)"
                          }
                        },
                        "id": 100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "NRO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 50,
                        "src": "1894:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_OrgName_$54",
                          "typeString": "enum DetermineUser.OrgName"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1881:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 102,
                      "name": "_privateKeyNRO",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1908:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "src": "1881:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1881:41:2"
                },
                {
                  "expression": {
                    "id": 110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 105,
                        "name": "orgnameToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 95,
                        "src": "1932:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                          "typeString": "mapping(enum DetermineUser.OrgName => address[] storage ref)"
                        }
                      },
                      "id": 108,
                      "indexExpression": {
                        "expression": {
                          "id": 106,
                          "name": "OrgName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "1945:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                            "typeString": "type(enum DetermineUser.OrgName)"
                          }
                        },
                        "id": 107,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "NSA",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 51,
                        "src": "1945:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_OrgName_$54",
                          "typeString": "enum DetermineUser.OrgName"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1932:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 109,
                      "name": "_privateKeyNSA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10,
                      "src": "1959:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "src": "1932:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 111,
                  "nodeType": "ExpressionStatement",
                  "src": "1932:41:2"
                },
                {
                  "expression": {
                    "id": 117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 112,
                        "name": "orgnameToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 95,
                        "src": "1983:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                          "typeString": "mapping(enum DetermineUser.OrgName => address[] storage ref)"
                        }
                      },
                      "id": 115,
                      "indexExpression": {
                        "expression": {
                          "id": 113,
                          "name": "OrgName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "1996:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                            "typeString": "type(enum DetermineUser.OrgName)"
                          }
                        },
                        "id": 114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "CIA",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 52,
                        "src": "1996:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_OrgName_$54",
                          "typeString": "enum DetermineUser.OrgName"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1983:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 116,
                      "name": "_privateKeyCIA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13,
                      "src": "2010:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "src": "1983:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 118,
                  "nodeType": "ExpressionStatement",
                  "src": "1983:41:2"
                },
                {
                  "expression": {
                    "id": 124,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 119,
                        "name": "orgnameToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 95,
                        "src": "2034:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                          "typeString": "mapping(enum DetermineUser.OrgName => address[] storage ref)"
                        }
                      },
                      "id": 122,
                      "indexExpression": {
                        "expression": {
                          "id": 120,
                          "name": "OrgName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "2047:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                            "typeString": "type(enum DetermineUser.OrgName)"
                          }
                        },
                        "id": 121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "AWS",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 53,
                        "src": "2047:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_OrgName_$54",
                          "typeString": "enum DetermineUser.OrgName"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2034:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 123,
                      "name": "_privateKeyAWS",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16,
                      "src": "2061:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "src": "2034:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "id": 125,
                  "nodeType": "ExpressionStatement",
                  "src": "2034:41:2"
                }
              ]
            },
            "functionSelector": "3ab4059c",
            "id": 127,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createMapping",
            "nameLocation": "1747:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 96,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1760:2:2"
            },
            "returnParameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1770:0:2"
            },
            "scope": 465,
            "src": "1738:353:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 229,
              "nodeType": "Block",
              "src": "2462:760:2",
              "statements": [
                {
                  "body": {
                    "id": 161,
                    "nodeType": "Block",
                    "src": "2621:66:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 156,
                                "name": "_newprivateKeyNRO",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 130,
                                "src": "2655:17:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              },
                              "id": 158,
                              "indexExpression": {
                                "id": 157,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 143,
                                "src": "2673:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2655:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 153,
                              "name": "_privateKeyNRO",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7,
                              "src": "2635:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 155,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2635:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2635:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 160,
                        "nodeType": "ExpressionStatement",
                        "src": "2635:41:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 149,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 146,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 143,
                      "src": "2588:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 147,
                        "name": "_newprivateKeyNRO",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "2590:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 148,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2590:24:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2588:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 162,
                  "initializationExpression": {
                    "assignments": [
                      143
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 143,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2583:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 162,
                        "src": "2578:6:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 142,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2578:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 145,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 144,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2585:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2578:8:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 151,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2616:3:2",
                      "subExpression": {
                        "id": 150,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 143,
                        "src": "2616:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 152,
                    "nodeType": "ExpressionStatement",
                    "src": "2616:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "2573:114:2"
                },
                {
                  "body": {
                    "id": 182,
                    "nodeType": "Block",
                    "src": "2790:66:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 177,
                                "name": "_newprivateKeyNSA",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 136,
                                "src": "2824:17:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              },
                              "id": 179,
                              "indexExpression": {
                                "id": 178,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 164,
                                "src": "2842:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2824:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 174,
                              "name": "_privateKeyNSA",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "2804:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 176,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2804:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 180,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2804:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 181,
                        "nodeType": "ExpressionStatement",
                        "src": "2804:41:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 167,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 164,
                      "src": "2757:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 168,
                        "name": "_newprivateKeyNSA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 136,
                        "src": "2759:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 169,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2759:24:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2757:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 183,
                  "initializationExpression": {
                    "assignments": [
                      164
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 164,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2752:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 183,
                        "src": "2747:6:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 163,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2747:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 166,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 165,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2754:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2747:8:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 172,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2785:3:2",
                      "subExpression": {
                        "id": 171,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 164,
                        "src": "2785:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 173,
                    "nodeType": "ExpressionStatement",
                    "src": "2785:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "2742:114:2"
                },
                {
                  "body": {
                    "id": 203,
                    "nodeType": "Block",
                    "src": "2958:66:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 198,
                                "name": "_newprivateKeyCIA",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 133,
                                "src": "2992:17:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              },
                              "id": 200,
                              "indexExpression": {
                                "id": 199,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 185,
                                "src": "3010:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2992:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 195,
                              "name": "_privateKeyCIA",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13,
                              "src": "2972:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 197,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2972:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2972:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 202,
                        "nodeType": "ExpressionStatement",
                        "src": "2972:41:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 191,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 188,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 185,
                      "src": "2925:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 189,
                        "name": "_newprivateKeyCIA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 133,
                        "src": "2927:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 190,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2927:24:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2925:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 204,
                  "initializationExpression": {
                    "assignments": [
                      185
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 185,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2920:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2915:6:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 184,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2915:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 187,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2922:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2915:8:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 193,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2953:3:2",
                      "subExpression": {
                        "id": 192,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 185,
                        "src": "2953:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 194,
                    "nodeType": "ExpressionStatement",
                    "src": "2953:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "2910:114:2"
                },
                {
                  "body": {
                    "id": 224,
                    "nodeType": "Block",
                    "src": "3125:66:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 219,
                                "name": "_newprivateKeyAWS",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 139,
                                "src": "3159:17:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              },
                              "id": 221,
                              "indexExpression": {
                                "id": 220,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 206,
                                "src": "3177:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3159:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 216,
                              "name": "_privateKeyAWS",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "3139:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 218,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "3139:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3139:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 223,
                        "nodeType": "ExpressionStatement",
                        "src": "3139:41:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 212,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 209,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 206,
                      "src": "3092:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 210,
                        "name": "_newprivateKeyAWS",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 139,
                        "src": "3094:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 211,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3094:24:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3092:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 225,
                  "initializationExpression": {
                    "assignments": [
                      206
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 206,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3087:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 225,
                        "src": "3082:6:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 205,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3082:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 208,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 207,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3089:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3082:8:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 214,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "3120:3:2",
                      "subExpression": {
                        "id": 213,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 206,
                        "src": "3120:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 215,
                    "nodeType": "ExpressionStatement",
                    "src": "3120:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "3077:114:2"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 226,
                      "name": "createMapping",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 127,
                      "src": "3200:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 227,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3200:15:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 228,
                  "nodeType": "ExpressionStatement",
                  "src": "3200:15:2"
                }
              ]
            },
            "functionSelector": "cb44a116",
            "id": 230,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changePrivateKeys",
            "nameLocation": "2296:17:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 140,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "_newprivateKeyNRO",
                  "nameLocation": "2331:17:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "2314:34:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 128,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2314:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 129,
                    "nodeType": "ArrayTypeName",
                    "src": "2314:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 133,
                  "mutability": "mutable",
                  "name": "_newprivateKeyCIA",
                  "nameLocation": "2366:17:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "2349:34:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 131,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2349:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 132,
                    "nodeType": "ArrayTypeName",
                    "src": "2349:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 136,
                  "mutability": "mutable",
                  "name": "_newprivateKeyNSA",
                  "nameLocation": "2401:17:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "2384:34:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 134,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2384:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 135,
                    "nodeType": "ArrayTypeName",
                    "src": "2384:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 139,
                  "mutability": "mutable",
                  "name": "_newprivateKeyAWS",
                  "nameLocation": "2436:17:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "2419:34:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 137,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2419:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 138,
                    "nodeType": "ArrayTypeName",
                    "src": "2419:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2313:141:2"
            },
            "returnParameters": {
              "id": 141,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2462:0:2"
            },
            "scope": 465,
            "src": "2287:935:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 293,
              "nodeType": "Block",
              "src": "3331:457:2",
              "statements": [
                {
                  "assignments": [
                    241
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 241,
                      "mutability": "mutable",
                      "name": "result",
                      "nameLocation": "3416:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 293,
                      "src": "3411:11:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 240,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3411:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 242,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3411:11:2"
                },
                {
                  "expression": {
                    "id": 245,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 243,
                      "name": "result",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 241,
                      "src": "3432:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 244,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3440:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3432:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 246,
                  "nodeType": "ExpressionStatement",
                  "src": "3432:13:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    },
                    "id": 250,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 247,
                      "name": "selectionNumOrg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 235,
                      "src": "3459:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_OrgName_$54",
                        "typeString": "enum DetermineUser.OrgName"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 248,
                        "name": "OrgName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 54,
                        "src": "3476:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                          "typeString": "type(enum DetermineUser.OrgName)"
                        }
                      },
                      "id": 249,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "None",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 49,
                      "src": "3476:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_OrgName_$54",
                        "typeString": "enum DetermineUser.OrgName"
                      }
                    },
                    "src": "3459:29:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 256,
                  "nodeType": "IfStatement",
                  "src": "3455:49:2",
                  "trueBody": {
                    "id": 255,
                    "nodeType": "Block",
                    "src": "3490:14:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 253,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 251,
                            "name": "result",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 241,
                            "src": "3491:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 252,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3498:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3491:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 254,
                        "nodeType": "ExpressionStatement",
                        "src": "3491:11:2"
                      }
                    ]
                  }
                },
                {
                  "body": {
                    "id": 289,
                    "nodeType": "Block",
                    "src": "3638:120:2",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 276,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 270,
                                "name": "orgnameToKey",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 95,
                                "src": "3656:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                                  "typeString": "mapping(enum DetermineUser.OrgName => address[] storage ref)"
                                }
                              },
                              "id": 272,
                              "indexExpression": {
                                "id": 271,
                                "name": "selectionNumOrg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 235,
                                "src": "3669:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_OrgName_$54",
                                  "typeString": "enum DetermineUser.OrgName"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3656:29:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 274,
                            "indexExpression": {
                              "id": 273,
                              "name": "j",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 258,
                              "src": "3686:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3656:32:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 275,
                            "name": "usersPrivateKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 232,
                            "src": "3690:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3656:49:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 287,
                          "nodeType": "Block",
                          "src": "3732:15:2",
                          "statements": [
                            {
                              "expression": {
                                "id": 285,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 283,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 241,
                                  "src": "3733:6:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "66616c7365",
                                  "id": 284,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3740:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "false"
                                },
                                "src": "3733:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 286,
                              "nodeType": "ExpressionStatement",
                              "src": "3733:12:2"
                            }
                          ]
                        },
                        "id": 288,
                        "nodeType": "IfStatement",
                        "src": "3652:95:2",
                        "trueBody": {
                          "id": 282,
                          "nodeType": "Block",
                          "src": "3706:20:2",
                          "statements": [
                            {
                              "expression": {
                                "id": 279,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 277,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 241,
                                  "src": "3707:6:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "74727565",
                                  "id": 278,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3714:4:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "3707:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 280,
                              "nodeType": "ExpressionStatement",
                              "src": "3707:11:2"
                            },
                            {
                              "id": 281,
                              "nodeType": "Break",
                              "src": "3719:5:2"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 266,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 261,
                      "name": "j",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 258,
                      "src": "3591:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 262,
                          "name": "orgnameToKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 95,
                          "src": "3595:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_OrgName_$54_$_t_array$_t_address_$dyn_storage_$",
                            "typeString": "mapping(enum DetermineUser.OrgName => address[] storage ref)"
                          }
                        },
                        "id": 264,
                        "indexExpression": {
                          "id": 263,
                          "name": "selectionNumOrg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 235,
                          "src": "3608:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_OrgName_$54",
                            "typeString": "enum DetermineUser.OrgName"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3595:29:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 265,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3595:36:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3591:40:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 290,
                  "initializationExpression": {
                    "assignments": [
                      258
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 258,
                        "mutability": "mutable",
                        "name": "j",
                        "nameLocation": "3584:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 290,
                        "src": "3579:6:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 257,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3579:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 260,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 259,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3588:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3579:10:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 268,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "3633:3:2",
                      "subExpression": {
                        "id": 267,
                        "name": "j",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 258,
                        "src": "3633:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 269,
                    "nodeType": "ExpressionStatement",
                    "src": "3633:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "3574:184:2"
                },
                {
                  "expression": {
                    "id": 291,
                    "name": "result",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 241,
                    "src": "3774:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 239,
                  "id": 292,
                  "nodeType": "Return",
                  "src": "3767:13:2"
                }
              ]
            },
            "functionSelector": "33586ff9",
            "id": 294,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkOrgList",
            "nameLocation": "3242:12:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 232,
                  "mutability": "mutable",
                  "name": "usersPrivateKey",
                  "nameLocation": "3263:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3255:23:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 231,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3255:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 235,
                  "mutability": "mutable",
                  "name": "selectionNumOrg",
                  "nameLocation": "3289:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3281:23:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_OrgName_$54",
                    "typeString": "enum DetermineUser.OrgName"
                  },
                  "typeName": {
                    "id": 234,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 233,
                      "name": "OrgName",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54,
                      "src": "3281:7:2"
                    },
                    "referencedDeclaration": 54,
                    "src": "3281:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3254:51:2"
            },
            "returnParameters": {
              "id": 239,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 238,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3326:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 237,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3326:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3325:6:2"
            },
            "scope": 465,
            "src": "3233:555:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 386,
              "nodeType": "Block",
              "src": "3893:652:2",
              "statements": [
                {
                  "assignments": [
                    306
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 306,
                      "mutability": "mutable",
                      "name": "result",
                      "nameLocation": "3992:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 386,
                      "src": "3987:11:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 305,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3987:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 307,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3987:11:2"
                },
                {
                  "expression": {
                    "id": 310,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 308,
                      "name": "result",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 306,
                      "src": "4008:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 309,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4016:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "4008:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 311,
                  "nodeType": "ExpressionStatement",
                  "src": "4008:13:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 325,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 320,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_enum$_OrgName_$54",
                                "typeString": "enum DetermineUser.OrgName"
                              },
                              "id": 315,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 312,
                                "name": "selectionNumOrg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "4037:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_OrgName_$54",
                                  "typeString": "enum DetermineUser.OrgName"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 313,
                                  "name": "OrgName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 54,
                                  "src": "4054:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                                    "typeString": "type(enum DetermineUser.OrgName)"
                                  }
                                },
                                "id": 314,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "NRO",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 50,
                                "src": "4054:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_OrgName_$54",
                                  "typeString": "enum DetermineUser.OrgName"
                                }
                              },
                              "src": "4037:28:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_enum$_OrgName_$54",
                                "typeString": "enum DetermineUser.OrgName"
                              },
                              "id": 319,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 316,
                                "name": "selectionNumOrg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "4069:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_OrgName_$54",
                                  "typeString": "enum DetermineUser.OrgName"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 317,
                                  "name": "OrgName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 54,
                                  "src": "4086:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                                    "typeString": "type(enum DetermineUser.OrgName)"
                                  }
                                },
                                "id": 318,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "NSA",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 51,
                                "src": "4086:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_OrgName_$54",
                                  "typeString": "enum DetermineUser.OrgName"
                                }
                              },
                              "src": "4069:28:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "4037:60:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            },
                            "id": 324,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 321,
                              "name": "selectionNumOrg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "4101:15:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_OrgName_$54",
                                "typeString": "enum DetermineUser.OrgName"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "id": 322,
                                "name": "OrgName",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 54,
                                "src": "4118:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                                  "typeString": "type(enum DetermineUser.OrgName)"
                                }
                              },
                              "id": 323,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "CIA",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52,
                              "src": "4118:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_OrgName_$54",
                                "typeString": "enum DetermineUser.OrgName"
                              }
                            },
                            "src": "4101:28:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4037:92:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 326,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "4036:94:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_UserType_$63",
                        "typeString": "enum DetermineUser.UserType"
                      },
                      "id": 330,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 327,
                        "name": "selectionNumType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 300,
                        "src": "4134:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_UserType_$63",
                          "typeString": "enum DetermineUser.UserType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 328,
                          "name": "UserType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 63,
                          "src": "4152:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_UserType_$63_$",
                            "typeString": "type(enum DetermineUser.UserType)"
                          }
                        },
                        "id": 329,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "User",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 59,
                        "src": "4152:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_UserType_$63",
                          "typeString": "enum DetermineUser.UserType"
                        }
                      },
                      "src": "4134:31:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4036:129:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 345,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_enum$_OrgName_$54",
                          "typeString": "enum DetermineUser.OrgName"
                        },
                        "id": 340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 337,
                          "name": "selectionNumOrg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 297,
                          "src": "4199:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_OrgName_$54",
                            "typeString": "enum DetermineUser.OrgName"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 338,
                            "name": "OrgName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 54,
                            "src": "4216:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                              "typeString": "type(enum DetermineUser.OrgName)"
                            }
                          },
                          "id": 339,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "AWS",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 53,
                          "src": "4216:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_OrgName_$54",
                            "typeString": "enum DetermineUser.OrgName"
                          }
                        },
                        "src": "4199:28:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "&&",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_enum$_UserType_$63",
                          "typeString": "enum DetermineUser.UserType"
                        },
                        "id": 344,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 341,
                          "name": "selectionNumType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 300,
                          "src": "4231:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_UserType_$63",
                            "typeString": "enum DetermineUser.UserType"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 342,
                            "name": "UserType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 63,
                            "src": "4249:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_UserType_$63_$",
                              "typeString": "type(enum DetermineUser.UserType)"
                            }
                          },
                          "id": 343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "ProviderBoth",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 62,
                          "src": "4249:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_UserType_$63",
                            "typeString": "enum DetermineUser.UserType"
                          }
                        },
                        "src": "4231:39:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "4199:71:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_OrgName_$54",
                            "typeString": "enum DetermineUser.OrgName"
                          },
                          "id": 354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 351,
                            "name": "selectionNumOrg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "4305:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 352,
                              "name": "OrgName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 54,
                              "src": "4322:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_OrgName_$54_$",
                                "typeString": "type(enum DetermineUser.OrgName)"
                              }
                            },
                            "id": 353,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "None",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 49,
                            "src": "4322:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          },
                          "src": "4305:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 368,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 363,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_enum$_UserType_$63",
                                    "typeString": "enum DetermineUser.UserType"
                                  },
                                  "id": 358,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 355,
                                    "name": "selectionNumType",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 300,
                                    "src": "4339:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_UserType_$63",
                                      "typeString": "enum DetermineUser.UserType"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 356,
                                      "name": "UserType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 63,
                                      "src": "4357:8:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_UserType_$63_$",
                                        "typeString": "type(enum DetermineUser.UserType)"
                                      }
                                    },
                                    "id": 357,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "ProviderCloud",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 61,
                                    "src": "4357:22:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_UserType_$63",
                                      "typeString": "enum DetermineUser.UserType"
                                    }
                                  },
                                  "src": "4339:40:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_enum$_UserType_$63",
                                    "typeString": "enum DetermineUser.UserType"
                                  },
                                  "id": 362,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 359,
                                    "name": "selectionNumType",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 300,
                                    "src": "4383:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_UserType_$63",
                                      "typeString": "enum DetermineUser.UserType"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 360,
                                      "name": "UserType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 63,
                                      "src": "4401:8:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_UserType_$63_$",
                                        "typeString": "type(enum DetermineUser.UserType)"
                                      }
                                    },
                                    "id": 361,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "ProviderStorage",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 60,
                                    "src": "4401:24:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_UserType_$63",
                                      "typeString": "enum DetermineUser.UserType"
                                    }
                                  },
                                  "src": "4383:42:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "4339:86:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_enum$_UserType_$63",
                                  "typeString": "enum DetermineUser.UserType"
                                },
                                "id": 367,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 364,
                                  "name": "selectionNumType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 300,
                                  "src": "4429:16:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_UserType_$63",
                                    "typeString": "enum DetermineUser.UserType"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 365,
                                    "name": "UserType",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 63,
                                    "src": "4447:8:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_UserType_$63_$",
                                      "typeString": "type(enum DetermineUser.UserType)"
                                    }
                                  },
                                  "id": 366,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "None",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 58,
                                  "src": "4447:13:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_UserType_$63",
                                    "typeString": "enum DetermineUser.UserType"
                                  }
                                },
                                "src": "4429:31:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "4339:121:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 369,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4338:123:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4305:156:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 380,
                        "nodeType": "Block",
                        "src": "4491:15:2",
                        "statements": [
                          {
                            "expression": {
                              "id": 378,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 376,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 306,
                                "src": "4492:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "hexValue": "66616c7365",
                                "id": 377,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4499:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "src": "4492:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 379,
                            "nodeType": "ExpressionStatement",
                            "src": "4492:12:2"
                          }
                        ]
                      },
                      "id": 381,
                      "nodeType": "IfStatement",
                      "src": "4301:205:2",
                      "trueBody": {
                        "id": 375,
                        "nodeType": "Block",
                        "src": "4462:23:2",
                        "statements": [
                          {
                            "expression": {
                              "id": 373,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 371,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 306,
                                "src": "4463:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "hexValue": "74727565",
                                "id": 372,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4470:4:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "src": "4463:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 374,
                            "nodeType": "ExpressionStatement",
                            "src": "4463:11:2"
                          }
                        ]
                      }
                    },
                    "id": 382,
                    "nodeType": "IfStatement",
                    "src": "4195:311:2",
                    "trueBody": {
                      "id": 350,
                      "nodeType": "Block",
                      "src": "4272:23:2",
                      "statements": [
                        {
                          "expression": {
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 346,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 306,
                              "src": "4273:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "hexValue": "74727565",
                              "id": 347,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4280:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            "src": "4273:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 349,
                          "nodeType": "ExpressionStatement",
                          "src": "4273:11:2"
                        }
                      ]
                    }
                  },
                  "id": 383,
                  "nodeType": "IfStatement",
                  "src": "4032:474:2",
                  "trueBody": {
                    "id": 336,
                    "nodeType": "Block",
                    "src": "4166:23:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 332,
                            "name": "result",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 306,
                            "src": "4167:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4174:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "4167:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 335,
                        "nodeType": "ExpressionStatement",
                        "src": "4167:11:2"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 384,
                    "name": "result",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 306,
                    "src": "4531:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 304,
                  "id": 385,
                  "nodeType": "Return",
                  "src": "4524:13:2"
                }
              ]
            },
            "functionSelector": "c60c718f",
            "id": 387,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkTypeList",
            "nameLocation": "3802:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 301,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 297,
                  "mutability": "mutable",
                  "name": "selectionNumOrg",
                  "nameLocation": "3824:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "3816:23:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_OrgName_$54",
                    "typeString": "enum DetermineUser.OrgName"
                  },
                  "typeName": {
                    "id": 296,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 295,
                      "name": "OrgName",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54,
                      "src": "3816:7:2"
                    },
                    "referencedDeclaration": 54,
                    "src": "3816:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 300,
                  "mutability": "mutable",
                  "name": "selectionNumType",
                  "nameLocation": "3850:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "3841:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_UserType_$63",
                    "typeString": "enum DetermineUser.UserType"
                  },
                  "typeName": {
                    "id": 299,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 298,
                      "name": "UserType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 63,
                      "src": "3841:8:2"
                    },
                    "referencedDeclaration": 63,
                    "src": "3841:8:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_UserType_$63",
                      "typeString": "enum DetermineUser.UserType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3815:52:2"
            },
            "returnParameters": {
              "id": 304,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 303,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "3888:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 302,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3888:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3887:6:2"
            },
            "scope": 465,
            "src": "3793:752:2",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 414,
              "nodeType": "Block",
              "src": "4749:193:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 399,
                            "name": "usersPrivateKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 389,
                            "src": "4782:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 400,
                            "name": "selectionNumOrg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 395,
                            "src": "4799:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          ],
                          "id": 398,
                          "name": "checkOrgList",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 294,
                          "src": "4769:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_enum$_OrgName_$54_$returns$_t_bool_$",
                            "typeString": "function (address,enum DetermineUser.OrgName) view returns (bool)"
                          }
                        },
                        "id": 401,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4769:46:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f752063616e7420646f2074686973",
                        "id": 402,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4817:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f7a3d20945792469410d3e7bcbc7f24c101e9142cb71b5fcdb67d93739dc8bc5",
                          "typeString": "literal_string \"You cant do this\""
                        },
                        "value": "You cant do this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f7a3d20945792469410d3e7bcbc7f24c101e9142cb71b5fcdb67d93739dc8bc5",
                          "typeString": "literal_string \"You cant do this\""
                        }
                      ],
                      "id": 397,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4761:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4761:75:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 404,
                  "nodeType": "ExpressionStatement",
                  "src": "4761:75:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 407,
                            "name": "selectionNumOrg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 395,
                            "src": "4868:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          },
                          {
                            "id": 408,
                            "name": "selectionNumType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 392,
                            "src": "4885:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_UserType_$63",
                              "typeString": "enum DetermineUser.UserType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            },
                            {
                              "typeIdentifier": "t_enum$_UserType_$63",
                              "typeString": "enum DetermineUser.UserType"
                            }
                          ],
                          "id": 406,
                          "name": "checkTypeList",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 387,
                          "src": "4854:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_enum$_OrgName_$54_$_t_enum$_UserType_$63_$returns$_t_bool_$",
                            "typeString": "function (enum DetermineUser.OrgName,enum DetermineUser.UserType) pure returns (bool)"
                          }
                        },
                        "id": 409,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4854:48:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f752063616e7420646f2074686973",
                        "id": 410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4904:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f7a3d20945792469410d3e7bcbc7f24c101e9142cb71b5fcdb67d93739dc8bc5",
                          "typeString": "literal_string \"You cant do this\""
                        },
                        "value": "You cant do this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f7a3d20945792469410d3e7bcbc7f24c101e9142cb71b5fcdb67d93739dc8bc5",
                          "typeString": "literal_string \"You cant do this\""
                        }
                      ],
                      "id": 405,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4846:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4846:77:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 412,
                  "nodeType": "ExpressionStatement",
                  "src": "4846:77:2"
                },
                {
                  "id": 413,
                  "nodeType": "PlaceholderStatement",
                  "src": "4933:1:2"
                }
              ]
            },
            "id": 415,
            "name": "onlyCertainKeys",
            "nameLocation": "4656:15:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 396,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 389,
                  "mutability": "mutable",
                  "name": "usersPrivateKey",
                  "nameLocation": "4680:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 415,
                  "src": "4672:23:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 388,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4672:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 392,
                  "mutability": "mutable",
                  "name": "selectionNumType",
                  "nameLocation": "4706:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 415,
                  "src": "4697:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_UserType_$63",
                    "typeString": "enum DetermineUser.UserType"
                  },
                  "typeName": {
                    "id": 391,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 390,
                      "name": "UserType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 63,
                      "src": "4697:8:2"
                    },
                    "referencedDeclaration": 63,
                    "src": "4697:8:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_UserType_$63",
                      "typeString": "enum DetermineUser.UserType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 395,
                  "mutability": "mutable",
                  "name": "selectionNumOrg",
                  "nameLocation": "4732:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 415,
                  "src": "4724:23:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_OrgName_$54",
                    "typeString": "enum DetermineUser.OrgName"
                  },
                  "typeName": {
                    "id": 394,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 393,
                      "name": "OrgName",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54,
                      "src": "4724:7:2"
                    },
                    "referencedDeclaration": 54,
                    "src": "4724:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4671:77:2"
            },
            "src": "4647:295:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 423,
              "nodeType": "Block",
              "src": "5010:56:2",
              "statements": [
                {
                  "expression": {
                    "id": 421,
                    "name": "_privateKeyNRO",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 7,
                    "src": "5045:14:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "functionReturnParameters": 420,
                  "id": 422,
                  "nodeType": "Return",
                  "src": "5038:21:2"
                }
              ]
            },
            "functionSelector": "4bd11884",
            "id": 424,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "people_list",
            "nameLocation": "4957:11:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 416,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4968:2:2"
            },
            "returnParameters": {
              "id": 420,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 419,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 424,
                  "src": "4992:16:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 417,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4992:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 418,
                    "nodeType": "ArrayTypeName",
                    "src": "4992:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4991:18:2"
            },
            "scope": 465,
            "src": "4948:118:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 463,
              "nodeType": "Block",
              "src": "5307:321:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 445,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 426,
                            "src": "5492:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 446,
                            "name": "selectionNumType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 429,
                            "src": "5499:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_UserType_$63",
                              "typeString": "enum DetermineUser.UserType"
                            }
                          },
                          {
                            "id": 447,
                            "name": "selectionNumOrg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 432,
                            "src": "5517:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_enum$_UserType_$63",
                              "typeString": "enum DetermineUser.UserType"
                            },
                            {
                              "typeIdentifier": "t_enum$_OrgName_$54",
                              "typeString": "enum DetermineUser.OrgName"
                            }
                          ],
                          "id": 444,
                          "name": "People",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 75,
                          "src": "5484:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_struct$_People_$75_storage_ptr_$",
                            "typeString": "type(struct DetermineUser.People storage pointer)"
                          }
                        },
                        "id": 448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "structConstructorCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5484:49:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_People_$75_memory_ptr",
                          "typeString": "struct DetermineUser.People memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_People_$75_memory_ptr",
                          "typeString": "struct DetermineUser.People memory"
                        }
                      ],
                      "expression": {
                        "id": 441,
                        "name": "people",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "5472:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_People_$75_storage_$dyn_storage",
                          "typeString": "struct DetermineUser.People storage ref[] storage ref"
                        }
                      },
                      "id": 443,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "5472:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_People_$75_storage_$dyn_storage_ptr_$_t_struct$_People_$75_storage_$returns$__$bound_to$_t_array$_t_struct$_People_$75_storage_$dyn_storage_ptr_$",
                        "typeString": "function (struct DetermineUser.People storage ref[] storage pointer,struct DetermineUser.People storage ref)"
                      }
                    },
                    "id": 449,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5472:62:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 450,
                  "nodeType": "ExpressionStatement",
                  "src": "5472:62:2"
                },
                {
                  "expression": {
                    "id": 455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 451,
                        "name": "nameToOrganization",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 89,
                        "src": "5544:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_enum$_OrgName_$54_$",
                          "typeString": "mapping(string memory => enum DetermineUser.OrgName)"
                        }
                      },
                      "id": 453,
                      "indexExpression": {
                        "id": 452,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 426,
                        "src": "5563:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5544:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_OrgName_$54",
                        "typeString": "enum DetermineUser.OrgName"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 454,
                      "name": "_orgName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 57,
                      "src": "5571:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_OrgName_$54",
                        "typeString": "enum DetermineUser.OrgName"
                      }
                    },
                    "src": "5544:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    }
                  },
                  "id": 456,
                  "nodeType": "ExpressionStatement",
                  "src": "5544:35:2"
                },
                {
                  "expression": {
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 457,
                        "name": "nameToUserType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "5589:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_enum$_UserType_$63_$",
                          "typeString": "mapping(string memory => enum DetermineUser.UserType)"
                        }
                      },
                      "id": 459,
                      "indexExpression": {
                        "id": 458,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 426,
                        "src": "5604:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5589:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_UserType_$63",
                        "typeString": "enum DetermineUser.UserType"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 460,
                      "name": "_userType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "5612:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_UserType_$63",
                        "typeString": "enum DetermineUser.UserType"
                      }
                    },
                    "src": "5589:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_UserType_$63",
                      "typeString": "enum DetermineUser.UserType"
                    }
                  },
                  "id": 462,
                  "nodeType": "ExpressionStatement",
                  "src": "5589:32:2"
                }
              ]
            },
            "functionSelector": "3afd5656",
            "id": 464,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 435,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "5260:3:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 436,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "5260:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 437,
                    "name": "selectionNumType",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 429,
                    "src": "5272:16:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_UserType_$63",
                      "typeString": "enum DetermineUser.UserType"
                    }
                  },
                  {
                    "id": 438,
                    "name": "selectionNumOrg",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 432,
                    "src": "5290:15:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    }
                  }
                ],
                "id": 439,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 434,
                  "name": "onlyCertainKeys",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 415,
                  "src": "5244:15:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "5244:62:2"
              }
            ],
            "name": "addPerson",
            "nameLocation": "5152:9:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 433,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 426,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "5177:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "5163:19:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 425,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5163:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 429,
                  "mutability": "mutable",
                  "name": "selectionNumType",
                  "nameLocation": "5194:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "5185:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_UserType_$63",
                    "typeString": "enum DetermineUser.UserType"
                  },
                  "typeName": {
                    "id": 428,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 427,
                      "name": "UserType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 63,
                      "src": "5185:8:2"
                    },
                    "referencedDeclaration": 63,
                    "src": "5185:8:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_UserType_$63",
                      "typeString": "enum DetermineUser.UserType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 432,
                  "mutability": "mutable",
                  "name": "selectionNumOrg",
                  "nameLocation": "5220:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "5212:23:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_OrgName_$54",
                    "typeString": "enum DetermineUser.OrgName"
                  },
                  "typeName": {
                    "id": 431,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 430,
                      "name": "OrgName",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54,
                      "src": "5212:7:2"
                    },
                    "referencedDeclaration": 54,
                    "src": "5212:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_OrgName_$54",
                      "typeString": "enum DetermineUser.OrgName"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5161:75:2"
            },
            "returnParameters": {
              "id": 440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5307:0:2"
            },
            "scope": 465,
            "src": "5143:485:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 466,
        "src": "726:5227:2",
        "usedErrors": []
      }
    ],
    "src": "640:5314:2"
  },
  "bytecode": "60806040523480156200001157600080fd5b506040516200152b3803806200152b833981016040819052620000349162000252565b6200003f33620000a1565b835162000054906001906020870190620000f1565b5081516200006a906002906020850190620000f1565b50825162000080906003906020860190620000f1565b50805162000096906004906020840190620000f1565b50505050506200030b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000149579160200282015b828111156200014957825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000112565b50620001579291506200015b565b5090565b5b808211156200015757600081556001016200015c565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001a057600080fd5b919050565b600082601f830112620001b757600080fd5b815160206001600160401b0380831115620001d657620001d662000172565b8260051b604051601f19603f83011681018181108482111715620001fe57620001fe62000172565b6040529384528581018301938381019250878511156200021d57600080fd5b83870191505b848210156200024757620002378262000188565b8352918301919083019062000223565b979650505050505050565b600080600080608085870312156200026957600080fd5b84516001600160401b03808211156200028157600080fd5b6200028f88838901620001a5565b95506020870151915080821115620002a657600080fd5b620002b488838901620001a5565b94506040870151915080821115620002cb57600080fd5b620002d988838901620001a5565b93506060870151915080821115620002f057600080fd5b50620002ff87828801620001a5565b91505092959194509250565b611210806200031b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fa2bc741161008c578063c60c718f11610066578063c60c718f146101cf578063cb44a116146101e2578063d82b87dc146101f5578063f2fde38b1461022357600080fd5b80637fa2bc74146101615780638da5cb5b1461019c5780639e7a13ad146101ad57600080fd5b806333586ff9146100d45780633ab4059c146100fc5780633afd5656146101065780634bd118841461011957806352d865391461012e578063715018a614610159575b600080fd5b6100e76100e2366004610cf0565b610236565b60405190151581526020015b60405180910390f35b61010461032a565b005b610104610114366004610dde565b610414565b610121610612565b6040516100f39190610e42565b61014161013c366004610e8f565b610674565b6040516001600160a01b0390911681526020016100f3565b6101046106ac565b61018f61016f366004610ebb565b805160208183018101805160088252928201919093012091525460ff1681565b6040516100f39190610f2c565b6000546001600160a01b0316610141565b6101c06101bb366004610f3f565b610712565b6040516100f393929190610f84565b6100e76101dd366004610fd7565b6107da565b6101046101f036600461107c565b610914565b61018f610203366004610ebb565b805160208183018101805160078252928201919093012091525460ff1681565b610104610231366004611129565b610ada565b6000808083600481111561024c5761024c610ef8565b1415610256575060015b60005b6009600085600481111561026f5761026f610ef8565b600481111561028057610280610ef8565b815260208101919091526040016000205481101561032257846001600160a01b0316600960008660048111156102b8576102b8610ef8565b60048111156102c9576102c9610ef8565b815260200190815260200160002082815481106102e8576102e8611144565b6000918252602090912001546001600160a01b0316141561030c5760019150610322565b600091508061031a8161115a565b915050610259565b509392505050565b6001600081905260096020528054610363917f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a3691610bee565b50600260008190526009602052805461039d917f6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c391610bee565b5060036000819052600960205280546103d7917fc575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e791610bee565b506004600081905260096020528054610411917f8dc18c4ccfd75f5c815b63770fa542fd953e8fef7e0e44bbdd4913470ce7e9cb91610bee565b50565b3382826104218382610236565b6104655760405162461bcd60e51b815260206004820152601060248201526f596f752063616e7420646f207468697360801b60448201526064015b60405180910390fd5b61046f81836107da565b6104ae5760405162461bcd60e51b815260206004820152601060248201526f596f752063616e7420646f207468697360801b604482015260640161045c565b600660405180606001604052808881526020018760048111156104d3576104d3610ef8565b81526020018660048111156104ea576104ea610ef8565b90528154600181018355600092835260209283902082518051939460029093029091019261051b9284920190610c3e565b50602082015160018083018054909160ff199091169083600481111561054357610543610ef8565b0217905550604082015160018201805461ff00191661010083600481111561056d5761056d610ef8565b02179055505060055460405160ff909116915060089061058e908990611183565b908152604051908190036020019020805460ff191660018360048111156105b7576105b7610ef8565b0217905550600560019054906101000a900460ff166007876040516105dc9190611183565b908152604051908190036020019020805460ff1916600183600481111561060557610605610ef8565b0217905550505050505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161064c575b5050505050905090565b6009602052816000526040600020818154811061069057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000546001600160a01b031633146107065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045c565b6107106000610b9e565b565b6006818154811061072257600080fd5b90600052602060002090600202016000915090508060000180546107459061119f565b80601f01602080910402602001604051908101604052809291908181526020018280546107719061119f565b80156107be5780601f10610793576101008083540402835291602001916107be565b820191906000526020600020905b8154815290600101906020018083116107a157829003601f168201915b5050506001909301549192505060ff8082169161010090041683565b60008060018460048111156107f1576107f1610ef8565b148061080e5750600284600481111561080c5761080c610ef8565b145b8061082a5750600384600481111561082857610828610ef8565b145b80156108475750600183600481111561084557610845610ef8565b145b156108545750600161090d565b600484600481111561086857610868610ef8565b1480156108865750600483600481111561088457610884610ef8565b145b156108935750600161090d565b60008460048111156108a7576108a7610ef8565b1480156108fc575060038360048111156108c3576108c3610ef8565b14806108e0575060028360048111156108de576108de610ef8565b145b806108fc575060008360048111156108fa576108fa610ef8565b145b156109095750600161090d565b5060005b9392505050565b60005b845181101561098157600185828151811061093457610934611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806109798161115a565b915050610917565b5060005b82518110156109ef5760028382815181106109a2576109a2611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806109e78161115a565b915050610985565b5060005b8351811015610a5d576003848281518110610a1057610a10611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610a558161115a565b9150506109f3565b5060005b8151811015610acb576004828281518110610a7e57610a7e611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610ac38161115a565b915050610a61565b50610ad461032a565b50505050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045c565b6001600160a01b038116610b995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045c565b610411815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610c2e5760005260206000209182015b82811115610c2e578254825591600101919060010190610c13565b50610c3a929150610cb2565b5090565b828054610c4a9061119f565b90600052602060002090601f016020900481019282610c6c5760008555610c2e565b82601f10610c8557805160ff1916838001178555610c2e565b82800160010185558215610c2e579182015b82811115610c2e578251825591602001919060010190610c97565b5b80821115610c3a5760008155600101610cb3565b80356001600160a01b0381168114610cde57600080fd5b919050565b6005811061041157600080fd5b60008060408385031215610d0357600080fd5b610d0c83610cc7565b91506020830135610d1c81610ce3565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6657610d66610d27565b604052919050565b600082601f830112610d7f57600080fd5b813567ffffffffffffffff811115610d9957610d99610d27565b610dac601f8201601f1916602001610d3d565b818152846020838601011115610dc157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610df357600080fd5b833567ffffffffffffffff811115610e0a57600080fd5b610e1686828701610d6e565b9350506020840135610e2781610ce3565b91506040840135610e3781610ce3565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610e835783516001600160a01b031683529284019291840191600101610e5e565b50909695505050505050565b60008060408385031215610ea257600080fd5b8235610ead81610ce3565b946020939093013593505050565b600060208284031215610ecd57600080fd5b813567ffffffffffffffff811115610ee457600080fd5b610ef084828501610d6e565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6005811061041157634e487b7160e01b600052602160045260246000fd5b60208101610f3983610f0e565b91905290565b600060208284031215610f5157600080fd5b5035919050565b60005b83811015610f73578181015183820152602001610f5b565b83811115610ad45750506000910152565b6060815260008451806060840152610fa3816080850160208901610f58565b601f01601f191682016080019050610fba84610f0e565b836020830152610fc983610f0e565b826040830152949350505050565b60008060408385031215610fea57600080fd5b8235610d0c81610ce3565b600082601f83011261100657600080fd5b8135602067ffffffffffffffff82111561102257611022610d27565b8160051b611031828201610d3d565b928352848101820192828101908785111561104b57600080fd5b83870192505b848310156110715761106283610cc7565b82529183019190830190611051565b979650505050505050565b6000806000806080858703121561109257600080fd5b843567ffffffffffffffff808211156110aa57600080fd5b6110b688838901610ff5565b955060208701359150808211156110cc57600080fd5b6110d888838901610ff5565b945060408701359150808211156110ee57600080fd5b6110fa88838901610ff5565b9350606087013591508082111561111057600080fd5b5061111d87828801610ff5565b91505092959194509250565b60006020828403121561113b57600080fd5b61090d82610cc7565b634e487b7160e01b600052603260045260246000fd5b600060001982141561117c57634e487b7160e01b600052601160045260246000fd5b5060010190565b60008251611195818460208701610f58565b9190910192915050565b600181811c908216806111b357607f821691505b602082108114156111d457634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c880b4f47c9ca56f164bb2f3251ed60b1fa2a0b2c733a8e42427f2498832a5c864736f6c634300080b0033",
  "bytecodeSha1": "f79a7ddabf4dd23ff807774b0a5f91d00b1db073",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "DetermineUser",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "49": [
            2006,
            2028,
            true
          ]
        }
      },
      "1": {},
      "2": {
        "DetermineUser.addPerson": {
          "37": [
            4769,
            4815,
            true
          ],
          "38": [
            4854,
            4902,
            true
          ]
        },
        "DetermineUser.checkOrgList": {
          "35": [
            3459,
            3488,
            false
          ],
          "36": [
            3656,
            3705,
            false
          ]
        },
        "DetermineUser.checkTypeList": {
          "39": [
            4037,
            4065,
            true
          ],
          "40": [
            4069,
            4097,
            true
          ],
          "41": [
            4101,
            4129,
            false
          ],
          "42": [
            4134,
            4165,
            false
          ],
          "43": [
            4199,
            4227,
            false
          ],
          "44": [
            4231,
            4270,
            false
          ],
          "45": [
            4305,
            4334,
            false
          ],
          "46": [
            4339,
            4379,
            true
          ],
          "47": [
            4383,
            4425,
            true
          ],
          "48": [
            4429,
            4460,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Ownable._transferOwnership": {
          "33": [
            2378,
            2395
          ],
          "34": [
            2405,
            2450
          ]
        },
        "Ownable.owner": {
          "0": [
            1101,
            1114
          ]
        },
        "Ownable.renounceOwnership": {
          "16": [
            1732,
            1762
          ]
        },
        "Ownable.transferOwnership": {
          "31": [
            1998,
            2071
          ],
          "32": [
            2081,
            2109
          ]
        }
      },
      "1": {
        "Context._msgSender": {
          "15": [
            712,
            729
          ]
        }
      },
      "2": {
        "DetermineUser.addPerson": {
          "11": [
            5472,
            5534
          ],
          "12": [
            5544,
            5579
          ],
          "13": [
            5589,
            5621
          ]
        },
        "DetermineUser.changePrivateKeys": {
          "22": [
            2635,
            2676
          ],
          "23": [
            2616,
            2619
          ],
          "24": [
            2804,
            2845
          ],
          "25": [
            2785,
            2788
          ],
          "26": [
            2972,
            3013
          ],
          "27": [
            2953,
            2956
          ],
          "28": [
            3139,
            3180
          ],
          "29": [
            3120,
            3123
          ],
          "30": [
            3200,
            3215
          ]
        },
        "DetermineUser.checkOrgList": {
          "1": [
            3491,
            3502
          ],
          "2": [
            3707,
            3718
          ],
          "3": [
            3719,
            3724
          ],
          "4": [
            3733,
            3745
          ],
          "5": [
            3633,
            3636
          ],
          "6": [
            3767,
            3780
          ]
        },
        "DetermineUser.checkTypeList": {
          "17": [
            4167,
            4178
          ],
          "18": [
            4273,
            4284
          ],
          "19": [
            4463,
            4474
          ],
          "20": [
            4492,
            4504
          ],
          "21": [
            4524,
            4537
          ]
        },
        "DetermineUser.createMapping": {
          "7": [
            1881,
            1922
          ],
          "8": [
            1932,
            1973
          ],
          "9": [
            1983,
            2024
          ],
          "10": [
            2034,
            2075
          ]
        },
        "DetermineUser.people_list": {
          "14": [
            5038,
            5059
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.4.1/Context",
    "OpenZeppelin/openzeppelin-contracts@4.4.1/Ownable"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fa2bc741161008c578063c60c718f11610066578063c60c718f146101cf578063cb44a116146101e2578063d82b87dc146101f5578063f2fde38b1461022357600080fd5b80637fa2bc74146101615780638da5cb5b1461019c5780639e7a13ad146101ad57600080fd5b806333586ff9146100d45780633ab4059c146100fc5780633afd5656146101065780634bd118841461011957806352d865391461012e578063715018a614610159575b600080fd5b6100e76100e2366004610cf0565b610236565b60405190151581526020015b60405180910390f35b61010461032a565b005b610104610114366004610dde565b610414565b610121610612565b6040516100f39190610e42565b61014161013c366004610e8f565b610674565b6040516001600160a01b0390911681526020016100f3565b6101046106ac565b61018f61016f366004610ebb565b805160208183018101805160088252928201919093012091525460ff1681565b6040516100f39190610f2c565b6000546001600160a01b0316610141565b6101c06101bb366004610f3f565b610712565b6040516100f393929190610f84565b6100e76101dd366004610fd7565b6107da565b6101046101f036600461107c565b610914565b61018f610203366004610ebb565b805160208183018101805160078252928201919093012091525460ff1681565b610104610231366004611129565b610ada565b6000808083600481111561024c5761024c610ef8565b1415610256575060015b60005b6009600085600481111561026f5761026f610ef8565b600481111561028057610280610ef8565b815260208101919091526040016000205481101561032257846001600160a01b0316600960008660048111156102b8576102b8610ef8565b60048111156102c9576102c9610ef8565b815260200190815260200160002082815481106102e8576102e8611144565b6000918252602090912001546001600160a01b0316141561030c5760019150610322565b600091508061031a8161115a565b915050610259565b509392505050565b6001600081905260096020528054610363917f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a3691610bee565b50600260008190526009602052805461039d917f6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c391610bee565b5060036000819052600960205280546103d7917fc575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e791610bee565b506004600081905260096020528054610411917f8dc18c4ccfd75f5c815b63770fa542fd953e8fef7e0e44bbdd4913470ce7e9cb91610bee565b50565b3382826104218382610236565b6104655760405162461bcd60e51b815260206004820152601060248201526f596f752063616e7420646f207468697360801b60448201526064015b60405180910390fd5b61046f81836107da565b6104ae5760405162461bcd60e51b815260206004820152601060248201526f596f752063616e7420646f207468697360801b604482015260640161045c565b600660405180606001604052808881526020018760048111156104d3576104d3610ef8565b81526020018660048111156104ea576104ea610ef8565b90528154600181018355600092835260209283902082518051939460029093029091019261051b9284920190610c3e565b50602082015160018083018054909160ff199091169083600481111561054357610543610ef8565b0217905550604082015160018201805461ff00191661010083600481111561056d5761056d610ef8565b02179055505060055460405160ff909116915060089061058e908990611183565b908152604051908190036020019020805460ff191660018360048111156105b7576105b7610ef8565b0217905550600560019054906101000a900460ff166007876040516105dc9190611183565b908152604051908190036020019020805460ff1916600183600481111561060557610605610ef8565b0217905550505050505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161064c575b5050505050905090565b6009602052816000526040600020818154811061069057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000546001600160a01b031633146107065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045c565b6107106000610b9e565b565b6006818154811061072257600080fd5b90600052602060002090600202016000915090508060000180546107459061119f565b80601f01602080910402602001604051908101604052809291908181526020018280546107719061119f565b80156107be5780601f10610793576101008083540402835291602001916107be565b820191906000526020600020905b8154815290600101906020018083116107a157829003601f168201915b5050506001909301549192505060ff8082169161010090041683565b60008060018460048111156107f1576107f1610ef8565b148061080e5750600284600481111561080c5761080c610ef8565b145b8061082a5750600384600481111561082857610828610ef8565b145b80156108475750600183600481111561084557610845610ef8565b145b156108545750600161090d565b600484600481111561086857610868610ef8565b1480156108865750600483600481111561088457610884610ef8565b145b156108935750600161090d565b60008460048111156108a7576108a7610ef8565b1480156108fc575060038360048111156108c3576108c3610ef8565b14806108e0575060028360048111156108de576108de610ef8565b145b806108fc575060008360048111156108fa576108fa610ef8565b145b156109095750600161090d565b5060005b9392505050565b60005b845181101561098157600185828151811061093457610934611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806109798161115a565b915050610917565b5060005b82518110156109ef5760028382815181106109a2576109a2611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806109e78161115a565b915050610985565b5060005b8351811015610a5d576003848281518110610a1057610a10611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610a558161115a565b9150506109f3565b5060005b8151811015610acb576004828281518110610a7e57610a7e611144565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610ac38161115a565b915050610a61565b50610ad461032a565b50505050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045c565b6001600160a01b038116610b995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045c565b610411815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610c2e5760005260206000209182015b82811115610c2e578254825591600101919060010190610c13565b50610c3a929150610cb2565b5090565b828054610c4a9061119f565b90600052602060002090601f016020900481019282610c6c5760008555610c2e565b82601f10610c8557805160ff1916838001178555610c2e565b82800160010185558215610c2e579182015b82811115610c2e578251825591602001919060010190610c97565b5b80821115610c3a5760008155600101610cb3565b80356001600160a01b0381168114610cde57600080fd5b919050565b6005811061041157600080fd5b60008060408385031215610d0357600080fd5b610d0c83610cc7565b91506020830135610d1c81610ce3565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6657610d66610d27565b604052919050565b600082601f830112610d7f57600080fd5b813567ffffffffffffffff811115610d9957610d99610d27565b610dac601f8201601f1916602001610d3d565b818152846020838601011115610dc157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610df357600080fd5b833567ffffffffffffffff811115610e0a57600080fd5b610e1686828701610d6e565b9350506020840135610e2781610ce3565b91506040840135610e3781610ce3565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610e835783516001600160a01b031683529284019291840191600101610e5e565b50909695505050505050565b60008060408385031215610ea257600080fd5b8235610ead81610ce3565b946020939093013593505050565b600060208284031215610ecd57600080fd5b813567ffffffffffffffff811115610ee457600080fd5b610ef084828501610d6e565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6005811061041157634e487b7160e01b600052602160045260246000fd5b60208101610f3983610f0e565b91905290565b600060208284031215610f5157600080fd5b5035919050565b60005b83811015610f73578181015183820152602001610f5b565b83811115610ad45750506000910152565b6060815260008451806060840152610fa3816080850160208901610f58565b601f01601f191682016080019050610fba84610f0e565b836020830152610fc983610f0e565b826040830152949350505050565b60008060408385031215610fea57600080fd5b8235610d0c81610ce3565b600082601f83011261100657600080fd5b8135602067ffffffffffffffff82111561102257611022610d27565b8160051b611031828201610d3d565b928352848101820192828101908785111561104b57600080fd5b83870192505b848310156110715761106283610cc7565b82529183019190830190611051565b979650505050505050565b6000806000806080858703121561109257600080fd5b843567ffffffffffffffff808211156110aa57600080fd5b6110b688838901610ff5565b955060208701359150808211156110cc57600080fd5b6110d888838901610ff5565b945060408701359150808211156110ee57600080fd5b6110fa88838901610ff5565b9350606087013591508082111561111057600080fd5b5061111d87828801610ff5565b91505092959194509250565b60006020828403121561113b57600080fd5b61090d82610cc7565b634e487b7160e01b600052603260045260246000fd5b600060001982141561117c57634e487b7160e01b600052601160045260246000fd5b5060010190565b60008251611195818460208701610f58565b9190910192915050565b600181811c908216806111b357607f821691505b602082108114156111d457634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c880b4f47c9ca56f164bb2f3251ed60b1fa2a0b2c733a8e42427f2498832a5c864736f6c634300080b0033",
  "deployedSourceMap": "726:5227:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3233:555;;;;;;:::i;:::-;;:::i;:::-;;;809:14:4;;802:22;784:41;;772:2;757:18;3233:555:2;;;;;;;;1738:353;;;:::i;:::-;;5143:485;;;;;;:::i;:::-;;:::i;4948:118::-;;;:::i;:::-;;;;;;;:::i;1678:49::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3580:32:4;;;3562:51;;3550:2;3535:18;1678:49:2;3416:203:4;1668:101:0;;;:::i;1620:52:2:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1036:85:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;1036:85;;1537:22:2;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;3793:752::-;;;;;;:::i;:::-;;:::i;2287:935::-;;;;;;:::i;:::-;;:::i;1565:49::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1918:198:0;;;;;;:::i;:::-;;:::i;3233:555:2:-;3326:4;;;3459:15;:29;;;;;;;;:::i;:::-;;3455:49;;;-1:-1:-1;3498:4:2;3455:49;3579:6;3574:184;3595:12;:29;3608:15;3595:29;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;3595:29:2;:36;3591:40;;3574:184;;;3690:15;-1:-1:-1;;;;;3656:49:2;:12;:29;3669:15;3656:29;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;3686:1;3656:32;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;3656:32:2;:49;3652:95;;;3714:4;3707:11;;3719:5;;3652:95;3740:5;3733:12;;3633:3;;;;:::i;:::-;;;;3574:184;;;-1:-1:-1;3774:6:2;3233:555;-1:-1:-1;;;3233:555:2:o;1738:353::-;1908:14;1881:25;;;;:12;:25;;:41;;;;:25;;:41;:::i;:::-;-1:-1:-1;1959:14:2;1932:25;;;;:12;:25;;:41;;;;:25;;:41;:::i;:::-;-1:-1:-1;2010:14:2;1983:25;;;;:12;:25;;:41;;;;:25;;:41;:::i;:::-;-1:-1:-1;2061:14:2;2034:25;;;;:12;:25;;:41;;;;:25;;:41;:::i;:::-;;1738:353::o;5143:485::-;5260:10;5272:16;5290:15;4769:46;4782:15;4799;4769:12;:46::i;:::-;4761:75;;;;-1:-1:-1;;;4761:75:2;;8825:2:4;4761:75:2;;;8807:21:4;8864:2;8844:18;;;8837:30;-1:-1:-1;;;8883:18:4;;;8876:46;8939:18;;4761:75:2;;;;;;;;;4854:48;4868:15;4885:16;4854:13;:48::i;:::-;4846:77;;;;-1:-1:-1;;;4846:77:2;;8825:2:4;4846:77:2;;;8807:21:4;8864:2;8844:18;;;8837:30;-1:-1:-1;;;8883:18:4;;;8876:46;8939:18;;4846:77:2;8623:340:4;4846:77:2;5472:6:::1;5484:49;;;;;;;;5492:5;5484:49;;;;5499:16;5484:49;;;;;;;;:::i;:::-;;;;;5517:15;5484:49;;;;;;;;:::i;:::-;::::0;;5472:62;;::::1;::::0;::::1;::::0;;-1:-1:-1;5472:62:2;;;::::1;::::0;;;;;;;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;5472:62:2::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;-1:-1:-1;;5472:62:2;;::::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;5472:62:2::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;-1:-1:-1;;5472:62:2::1;;::::0;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;;5571:8:2::1;::::0;5544:25:::1;::::0;5571:8:::1;::::0;;::::1;::::0;-1:-1:-1;5544:18:2::1;::::0;:25:::1;::::0;5563:5;;5544:25:::1;:::i;:::-;::::0;;;::::1;::::0;;;;;::::1;::::0;;;:35;;-1:-1:-1;;5544:35:2::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;;;;5612:9;;;;;;;;;;;5589:14;5604:5;5589:21;;;;;;:::i;:::-;::::0;;;::::1;::::0;;;;;::::1;::::0;;;:32;;-1:-1:-1;;5589:32:2::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;;;;5143:485:::0;;;;;;:::o;4948:118::-;4992:16;5045:14;5038:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5038:21:2;;;;;;;;;;;;;;;;;;;;;;;4948:118;:::o;1678:49::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1678:49:2;;-1:-1:-1;1678:49:2;;-1:-1:-1;1678:49:2:o;1668:101:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;9451:2:4;1240:68:0;;;9433:21:4;;;9470:18;;;9463:30;9529:34;9509:18;;;9502:62;9581:18;;1240:68:0;9249:356:4;1240:68:0;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;1537:22:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1537:22:2;;;;;;;-1:-1:-1;;1537:22:2;;;;;;;;;;:::o;3793:752::-;3888:4;;4054:11;4037:15;:28;;;;;;;;:::i;:::-;;:60;;;-1:-1:-1;4086:11:2;4069:15;:28;;;;;;;;:::i;:::-;;4037:60;:92;;;-1:-1:-1;4118:11:2;4101:15;:28;;;;;;;;:::i;:::-;;4037:92;4036:129;;;;-1:-1:-1;4152:13:2;4134:16;:31;;;;;;;;:::i;:::-;;4036:129;4032:474;;;-1:-1:-1;4174:4:2;4032:474;;;4216:11;4199:15;:28;;;;;;;;:::i;:::-;;:71;;;;-1:-1:-1;4249:21:2;4231:16;:39;;;;;;;;:::i;:::-;;4199:71;4195:311;;;-1:-1:-1;4280:4:2;4195:311;;;4322:12;4305:15;:29;;;;;;;;:::i;:::-;;:156;;;;-1:-1:-1;4357:22:2;4339:16;:40;;;;;;;;:::i;:::-;;:86;;;-1:-1:-1;4401:24:2;4383:16;:42;;;;;;;;:::i;:::-;;4339:86;:121;;;-1:-1:-1;4447:13:2;4429:16;:31;;;;;;;;:::i;:::-;;4339:121;4301:205;;;-1:-1:-1;4470:4:2;4301:205;;;-1:-1:-1;4499:5:2;4301:205;4531:6;3793:752;-1:-1:-1;;;3793:752:2:o;2287:935::-;2578:6;2573:114;2590:17;:24;2588:1;:26;2573:114;;;2635:14;2655:17;2673:1;2655:20;;;;;;;;:::i;:::-;;;;;;;;;;;;2635:41;;;;;;;-1:-1:-1;2635:41:2;;;;;;;;;;-1:-1:-1;;;;;;2635:41:2;-1:-1:-1;;;;;2635:41:2;;;;;;;;;2616:3;;;;:::i;:::-;;;;2573:114;;;;2747:6;2742:114;2759:17;:24;2757:1;:26;2742:114;;;2804:14;2824:17;2842:1;2824:20;;;;;;;;:::i;:::-;;;;;;;;;;;;2804:41;;;;;;;-1:-1:-1;2804:41:2;;;;;;;;;;-1:-1:-1;;;;;;2804:41:2;-1:-1:-1;;;;;2804:41:2;;;;;;;;;2785:3;;;;:::i;:::-;;;;2742:114;;;;2915:6;2910:114;2927:17;:24;2925:1;:26;2910:114;;;2972:14;2992:17;3010:1;2992:20;;;;;;;;:::i;:::-;;;;;;;;;;;;2972:41;;;;;;;-1:-1:-1;2972:41:2;;;;;;;;;;-1:-1:-1;;;;;;2972:41:2;-1:-1:-1;;;;;2972:41:2;;;;;;;;;2953:3;;;;:::i;:::-;;;;2910:114;;;;3082:6;3077:114;3094:17;:24;3092:1;:26;3077:114;;;3139:14;3159:17;3177:1;3159:20;;;;;;;;:::i;:::-;;;;;;;;;;;;3139:41;;;;;;;-1:-1:-1;3139:41:2;;;;;;;;;;-1:-1:-1;;;;;;3139:41:2;-1:-1:-1;;;;;3139:41:2;;;;;;;;;3120:3;;;;:::i;:::-;;;;3077:114;;;;3200:15;:13;:15::i;:::-;2287:935;;;;:::o;1918:198:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;9451:2:4;1240:68:0;;;9433:21:4;;;9470:18;;;9463:30;9529:34;9509:18;;;9502:62;9581:18;;1240:68:0;9249:356:4;1240:68:0;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;10197:2:4;1998:73:0::1;::::0;::::1;10179:21:4::0;10236:2;10216:18;;;10209:30;10275:34;10255:18;;;10248:62;-1:-1:-1;;;10326:18:4;;;10319:36;10372:19;;1998:73:0::1;9995:402:4::0;1998:73:0::1;2081:28;2100:8;2270:187:::0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:173:4;82:20;;-1:-1:-1;;;;;131:31:4;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:106::-;272:1;265:5;262:12;252:40;;288:1;285;278:12;303:336;381:6;389;442:2;430:9;421:7;417:23;413:32;410:52;;;458:1;455;448:12;410:52;481:29;500:9;481:29;:::i;:::-;471:39;;560:2;549:9;545:18;532:32;573:36;603:5;573:36;:::i;:::-;628:5;618:15;;;303:336;;;;;:::o;836:127::-;897:10;892:3;888:20;885:1;878:31;928:4;925:1;918:15;952:4;949:1;942:15;968:275;1039:2;1033:9;1104:2;1085:13;;-1:-1:-1;;1081:27:4;1069:40;;1139:18;1124:34;;1160:22;;;1121:62;1118:88;;;1186:18;;:::i;:::-;1222:2;1215:22;968:275;;-1:-1:-1;968:275:4:o;1248:531::-;1291:5;1344:3;1337:4;1329:6;1325:17;1321:27;1311:55;;1362:1;1359;1352:12;1311:55;1398:6;1385:20;1424:18;1420:2;1417:26;1414:52;;;1446:18;;:::i;:::-;1490:55;1533:2;1514:13;;-1:-1:-1;;1510:27:4;1539:4;1506:38;1490:55;:::i;:::-;1570:2;1561:7;1554:19;1616:3;1609:4;1604:2;1596:6;1592:15;1588:26;1585:35;1582:55;;;1633:1;1630;1623:12;1582:55;1698:2;1691:4;1683:6;1679:17;1672:4;1663:7;1659:18;1646:55;1746:1;1721:16;;;1739:4;1717:27;1710:38;;;;1725:7;1248:531;-1:-1:-1;;;1248:531:4:o;1784:629::-;1892:6;1900;1908;1961:2;1949:9;1940:7;1936:23;1932:32;1929:52;;;1977:1;1974;1967:12;1929:52;2017:9;2004:23;2050:18;2042:6;2039:30;2036:50;;;2082:1;2079;2072:12;2036:50;2105;2147:7;2138:6;2127:9;2123:22;2105:50;:::i;:::-;2095:60;;;2205:2;2194:9;2190:18;2177:32;2218:36;2248:5;2218:36;:::i;:::-;2273:5;-1:-1:-1;2330:2:4;2315:18;;2302:32;2343:38;2302:32;2343:38;:::i;:::-;2400:7;2390:17;;;1784:629;;;;;:::o;2418:658::-;2589:2;2641:21;;;2711:13;;2614:18;;;2733:22;;;2560:4;;2589:2;2812:15;;;;2786:2;2771:18;;;2560:4;2855:195;2869:6;2866:1;2863:13;2855:195;;;2934:13;;-1:-1:-1;;;;;2930:39:4;2918:52;;3025:15;;;;2990:12;;;;2966:1;2884:9;2855:195;;;-1:-1:-1;3067:3:4;;2418:658;-1:-1:-1;;;;;;2418:658:4:o;3081:330::-;3159:6;3167;3220:2;3208:9;3199:7;3195:23;3191:32;3188:52;;;3236:1;3233;3226:12;3188:52;3275:9;3262:23;3294:36;3324:5;3294:36;:::i;:::-;3349:5;3401:2;3386:18;;;;3373:32;;-1:-1:-1;;;3081:330:4:o;3624:322::-;3693:6;3746:2;3734:9;3725:7;3721:23;3717:32;3714:52;;;3762:1;3759;3752:12;3714:52;3802:9;3789:23;3835:18;3827:6;3824:30;3821:50;;;3867:1;3864;3857:12;3821:50;3890;3932:7;3923:6;3912:9;3908:22;3890:50;:::i;:::-;3880:60;3624:322;-1:-1:-1;;;;3624:322:4:o;3951:127::-;4012:10;4007:3;4003:20;4000:1;3993:31;4043:4;4040:1;4033:15;4067:4;4064:1;4057:15;4083:209;4163:1;4156:5;4153:12;4143:143;;4208:10;4203:3;4199:20;4196:1;4189:31;4243:4;4240:1;4233:15;4271:4;4268:1;4261:15;4297:231;4439:2;4424:18;;4451:37;4481:6;4451:37;:::i;:::-;4497:25;;;4297:231;:::o;4533:180::-;4592:6;4645:2;4633:9;4624:7;4620:23;4616:32;4613:52;;;4661:1;4658;4651:12;4613:52;-1:-1:-1;4684:23:4;;4533:180;-1:-1:-1;4533:180:4:o;4718:258::-;4790:1;4800:113;4814:6;4811:1;4808:13;4800:113;;;4890:11;;;4884:18;4871:11;;;4864:39;4836:2;4829:10;4800:113;;;4931:6;4928:1;4925:13;4922:48;;;-1:-1:-1;;4966:1:4;4948:16;;4941:27;4718:258::o;4981:640::-;5203:2;5192:9;5185:21;5166:4;5235:6;5229:13;5278:6;5273:2;5262:9;5258:18;5251:34;5294:69;5356:6;5350:3;5339:9;5335:19;5328:4;5320:6;5316:17;5294:69;:::i;:::-;5424:2;5403:15;-1:-1:-1;;5399:29:4;5384:45;;5431:3;5380:55;;-1:-1:-1;5444:37:4;5474:6;5444:37;:::i;:::-;5519:6;5512:4;5501:9;5497:20;5490:36;5535:37;5565:6;5535:37;:::i;:::-;5608:6;5603:2;5592:9;5588:18;5581:34;4981:640;;;;;;:::o;5626:419::-;5715:6;5723;5776:2;5764:9;5755:7;5751:23;5747:32;5744:52;;;5792:1;5789;5782:12;5744:52;5831:9;5818:23;5850:36;5880:5;5850:36;:::i;6050:718::-;6104:5;6157:3;6150:4;6142:6;6138:17;6134:27;6124:55;;6175:1;6172;6165:12;6124:55;6211:6;6198:20;6237:4;6260:18;6256:2;6253:26;6250:52;;;6282:18;;:::i;:::-;6328:2;6325:1;6321:10;6351:28;6375:2;6371;6367:11;6351:28;:::i;:::-;6413:15;;;6483;;;6479:24;;;6444:12;;;;6515:15;;;6512:35;;;6543:1;6540;6533:12;6512:35;6579:2;6571:6;6567:15;6556:26;;6591:148;6607:6;6602:3;6599:15;6591:148;;;6673:23;6692:3;6673:23;:::i;:::-;6661:36;;6624:12;;;;6717;;;;6591:148;;;6757:5;6050:718;-1:-1:-1;;;;;;;6050:718:4:o;6773:1048::-;6959:6;6967;6975;6983;7036:3;7024:9;7015:7;7011:23;7007:33;7004:53;;;7053:1;7050;7043:12;7004:53;7093:9;7080:23;7122:18;7163:2;7155:6;7152:14;7149:34;;;7179:1;7176;7169:12;7149:34;7202:61;7255:7;7246:6;7235:9;7231:22;7202:61;:::i;:::-;7192:71;;7316:2;7305:9;7301:18;7288:32;7272:48;;7345:2;7335:8;7332:16;7329:36;;;7361:1;7358;7351:12;7329:36;7384:63;7439:7;7428:8;7417:9;7413:24;7384:63;:::i;:::-;7374:73;;7500:2;7489:9;7485:18;7472:32;7456:48;;7529:2;7519:8;7516:16;7513:36;;;7545:1;7542;7535:12;7513:36;7568:63;7623:7;7612:8;7601:9;7597:24;7568:63;:::i;:::-;7558:73;;7684:2;7673:9;7669:18;7656:32;7640:48;;7713:2;7703:8;7700:16;7697:36;;;7729:1;7726;7719:12;7697:36;;7752:63;7807:7;7796:8;7785:9;7781:24;7752:63;:::i;:::-;7742:73;;;6773:1048;;;;;;;:::o;8063:186::-;8122:6;8175:2;8163:9;8154:7;8150:23;8146:32;8143:52;;;8191:1;8188;8181:12;8143:52;8214:29;8233:9;8214:29;:::i;8254:127::-;8315:10;8310:3;8306:20;8303:1;8296:31;8346:4;8343:1;8336:15;8370:4;8367:1;8360:15;8386:232;8425:3;-1:-1:-1;;8446:17:4;;8443:140;;;8505:10;8500:3;8496:20;8493:1;8486:31;8540:4;8537:1;8530:15;8568:4;8565:1;8558:15;8443:140;-1:-1:-1;8610:1:4;8599:13;;8386:232::o;8968:276::-;9099:3;9137:6;9131:13;9153:53;9199:6;9194:3;9187:4;9179:6;9175:17;9153:53;:::i;:::-;9222:16;;;;;8968:276;-1:-1:-1;;8968:276:4:o;9610:380::-;9689:1;9685:12;;;;9732;;;9753:61;;9807:4;9799:6;9795:17;9785:27;;9753:61;9860:2;9852:6;9849:14;9829:18;9826:38;9823:161;;;9906:10;9901:3;9897:20;9894:1;9887:31;9941:4;9938:1;9931:15;9969:4;9966:1;9959:15;9823:161;;9610:380;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "offset": [
    726,
    5953
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7FA2BC74 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC60C718F GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC60C718F EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xCB44A116 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xD82B87DC EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7FA2BC74 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x9E7A13AD EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33586FF9 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x3AB4059C EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x3AFD5656 EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0x4BD11884 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x52D86539 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x159 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x236 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x104 PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDE JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x612 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xE42 JUMP JUMPDEST PUSH2 0x141 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0x674 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x6AC JUMP JUMPDEST PUSH2 0x18F PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0xEBB JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x8 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xF2C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x141 JUMP JUMPDEST PUSH2 0x1C0 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0xF3F JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF84 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x7DA JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x107C JUMP JUMPDEST PUSH2 0x914 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBB JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x7 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x231 CALLDATASIZE PUSH1 0x4 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0xADA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x24C JUMPI PUSH2 0x24C PUSH2 0xEF8 JUMP JUMPDEST EQ ISZERO PUSH2 0x256 JUMPI POP PUSH1 0x1 JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x26F JUMPI PUSH2 0x26F PUSH2 0xEF8 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x280 JUMPI PUSH2 0x280 PUSH2 0xEF8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x322 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x9 PUSH1 0x0 DUP7 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2B8 JUMPI PUSH2 0x2B8 PUSH2 0xEF8 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C9 JUMPI PUSH2 0x2C9 PUSH2 0xEF8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2E8 JUMPI PUSH2 0x2E8 PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x30C JUMPI PUSH1 0x1 SWAP2 POP PUSH2 0x322 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP DUP1 PUSH2 0x31A DUP2 PUSH2 0x115A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x259 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 SLOAD PUSH2 0x363 SWAP2 PUSH32 0x92E85D02570A8092D09A6E3A57665BC3815A2699A4074001BF1CCABF660F5A36 SWAP2 PUSH2 0xBEE JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 SLOAD PUSH2 0x39D SWAP2 PUSH32 0x6CDE3CEA4B3A3FB2488B2808BAE7556F4A405E50F65E1794383BC026131B13C3 SWAP2 PUSH2 0xBEE JUMP JUMPDEST POP PUSH1 0x3 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 SLOAD PUSH2 0x3D7 SWAP2 PUSH32 0xC575C31FEA594A6EB97C8E9D3F9CAEE4C16218C6EF37E923234C0FE9014A61E7 SWAP2 PUSH2 0xBEE JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 SLOAD PUSH2 0x411 SWAP2 PUSH32 0x8DC18C4CCFD75F5C815B63770FA542FD953E8FEF7E0E44BBDD4913470CE7E9CB SWAP2 PUSH2 0xBEE JUMP JUMPDEST POP JUMP JUMPDEST CALLER DUP3 DUP3 PUSH2 0x421 DUP4 DUP3 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x465 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x596F752063616E7420646F2074686973 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x46F DUP2 DUP4 PUSH2 0x7DA JUMP JUMPDEST PUSH2 0x4AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x596F752063616E7420646F2074686973 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45C JUMP JUMPDEST PUSH1 0x6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4D3 JUMPI PUSH2 0x4D3 PUSH2 0xEF8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4EA PUSH2 0xEF8 JUMP JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 SWAP1 KECCAK256 DUP3 MLOAD DUP1 MLOAD SWAP4 SWAP5 PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD SWAP3 PUSH2 0x51B SWAP3 DUP5 SWAP3 ADD SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD SWAP1 SWAP2 PUSH1 0xFF NOT SWAP1 SWAP2 AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x543 JUMPI PUSH2 0x543 PUSH2 0xEF8 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x56D JUMPI PUSH2 0x56D PUSH2 0xEF8 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 POP PUSH1 0x8 SWAP1 PUSH2 0x58E SWAP1 DUP10 SWAP1 PUSH2 0x1183 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0xEF8 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x7 DUP8 PUSH1 0x40 MLOAD PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x1183 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x605 JUMPI PUSH2 0x605 PUSH2 0xEF8 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x66A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x64C JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x690 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45C JUMP JUMPDEST PUSH2 0x710 PUSH1 0x0 PUSH2 0xB9E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x745 SWAP1 PUSH2 0x119F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x771 SWAP1 PUSH2 0x119F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7BE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x793 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7BE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7A1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7F1 JUMPI PUSH2 0x7F1 PUSH2 0xEF8 JUMP JUMPDEST EQ DUP1 PUSH2 0x80E JUMPI POP PUSH1 0x2 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x80C JUMPI PUSH2 0x80C PUSH2 0xEF8 JUMP JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x82A JUMPI POP PUSH1 0x3 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x828 JUMPI PUSH2 0x828 PUSH2 0xEF8 JUMP JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 0x847 JUMPI POP PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x845 JUMPI PUSH2 0x845 PUSH2 0xEF8 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x854 JUMPI POP PUSH1 0x1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x4 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x868 JUMPI PUSH2 0x868 PUSH2 0xEF8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x886 JUMPI POP PUSH1 0x4 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x884 JUMPI PUSH2 0x884 PUSH2 0xEF8 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x893 JUMPI POP PUSH1 0x1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x8A7 JUMPI PUSH2 0x8A7 PUSH2 0xEF8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x8FC JUMPI POP PUSH1 0x3 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x8C3 JUMPI PUSH2 0x8C3 PUSH2 0xEF8 JUMP JUMPDEST EQ DUP1 PUSH2 0x8E0 JUMPI POP PUSH1 0x2 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x8DE JUMPI PUSH2 0x8DE PUSH2 0xEF8 JUMP JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x8FC JUMPI POP PUSH1 0x0 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x8FA JUMPI PUSH2 0x8FA PUSH2 0xEF8 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x909 JUMPI POP PUSH1 0x1 PUSH2 0x90D JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x981 JUMPI PUSH1 0x1 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x934 JUMPI PUSH2 0x934 PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x979 DUP2 PUSH2 0x115A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x917 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9EF JUMPI PUSH1 0x2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI PUSH2 0x9A2 PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x9E7 DUP2 PUSH2 0x115A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x985 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xA5D JUMPI PUSH1 0x3 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA10 JUMPI PUSH2 0xA10 PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0xA55 DUP2 PUSH2 0x115A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9F3 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xACB JUMPI PUSH1 0x4 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA7E JUMPI PUSH2 0xA7E PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0xAC3 DUP2 PUSH2 0x115A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA61 JUMP JUMPDEST POP PUSH2 0xAD4 PUSH2 0x32A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x45C JUMP JUMPDEST PUSH2 0x411 DUP2 JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xC2E JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xC2E JUMPI DUP3 SLOAD DUP3 SSTORE SWAP2 PUSH1 0x1 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xC13 JUMP JUMPDEST POP PUSH2 0xC3A SWAP3 SWAP2 POP PUSH2 0xCB2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xC4A SWAP1 PUSH2 0x119F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xC6C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xC2E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xC85 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xC2E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xC2E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xC2E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xC97 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xC3A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xCB3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xCDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD0C DUP4 PUSH2 0xCC7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xD1C DUP2 PUSH2 0xCE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xD66 JUMPI PUSH2 0xD66 PUSH2 0xD27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD99 JUMPI PUSH2 0xD99 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0xDAC PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0xD3D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xDC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE16 DUP7 DUP3 DUP8 ADD PUSH2 0xD6E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xE27 DUP2 PUSH2 0xCE3 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xE37 DUP2 PUSH2 0xCE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE83 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xE5E JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xEAD DUP2 PUSH2 0xCE3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xECD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEF0 DUP5 DUP3 DUP6 ADD PUSH2 0xD6E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x411 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF39 DUP4 PUSH2 0xF0E JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF73 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF5B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAD4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 DUP5 MLOAD DUP1 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xFA3 DUP2 PUSH1 0x80 DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0xF58 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x80 ADD SWAP1 POP PUSH2 0xFBA DUP5 PUSH2 0xF0E JUMP JUMPDEST DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFC9 DUP4 PUSH2 0xF0E JUMP JUMPDEST DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xD0C DUP2 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1022 JUMPI PUSH2 0x1022 PUSH2 0xD27 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x1031 DUP3 DUP3 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x104B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x1071 JUMPI PUSH2 0x1062 DUP4 PUSH2 0xCC7 JUMP JUMPDEST DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1051 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10B6 DUP9 DUP4 DUP10 ADD PUSH2 0xFF5 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D8 DUP9 DUP4 DUP10 ADD PUSH2 0xFF5 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10FA DUP9 DUP4 DUP10 ADD PUSH2 0xFF5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x111D DUP8 DUP3 DUP9 ADD PUSH2 0xFF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x113B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90D DUP3 PUSH2 0xCC7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x117C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1195 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xF58 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x11B3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x11D4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 DUP1 0xB4 DELEGATECALL PUSH29 0x9CA56F164BB2F3251ED60B1FA2A0B2C733A8E42427F2498832A5C86473 PUSH16 0x6C634300080B00330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCF"
    },
    "25": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x7FA2BC74"
    },
    "38": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8C"
    },
    "42": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC60C718F"
    },
    "49": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "GT",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC60C718F"
    },
    "60": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1CF"
    },
    "64": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xCB44A116"
    },
    "71": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1E2"
    },
    "75": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD82B87DC"
    },
    "82": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F5"
    },
    "86": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF2FDE38B"
    },
    "93": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x223"
    },
    "97": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "101": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "REVERT",
      "path": "2"
    },
    "102": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "103": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "104": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x7FA2BC74"
    },
    "109": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "110": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x161"
    },
    "113": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "120": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x19C"
    },
    "124": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x9E7A13AD"
    },
    "131": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1AD"
    },
    "135": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "138": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "139": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "REVERT",
      "path": "2"
    },
    "140": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "141": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "142": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x33586FF9"
    },
    "147": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "148": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD4"
    },
    "151": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "152": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "153": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x3AB4059C"
    },
    "158": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "159": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFC"
    },
    "162": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "163": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "164": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x3AFD5656"
    },
    "169": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "170": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x106"
    },
    "173": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "174": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "175": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x4BD11884"
    },
    "180": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "181": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x119"
    },
    "184": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "185": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "186": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x52D86539"
    },
    "191": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "192": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12E"
    },
    "195": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "196": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "197": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x715018A6"
    },
    "202": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "EQ",
      "path": "2"
    },
    "203": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x159"
    },
    "206": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "207": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "208": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "210": {
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "DUP1",
      "path": "2"
    },
    "211": {
      "first_revert": true,
      "fn": null,
      "offset": [
        726,
        5953
      ],
      "op": "REVERT",
      "path": "2"
    },
    "212": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "213": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE7"
    },
    "216": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE2"
    },
    "219": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "220": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "222": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCF0"
    },
    "225": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMP",
      "path": "2"
    },
    "226": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "227": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x236"
    },
    "230": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMP",
      "path": "2"
    },
    "231": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "232": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "234": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "235": {
      "op": "SWAP1"
    },
    "236": {
      "op": "ISZERO"
    },
    "237": {
      "op": "ISZERO"
    },
    "238": {
      "op": "DUP2"
    },
    "239": {
      "op": "MSTORE"
    },
    "240": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "242": {
      "op": "ADD"
    },
    "243": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "244": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "246": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "247": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "DUP1",
      "path": "2"
    },
    "248": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "249": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "SUB",
      "path": "2"
    },
    "250": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "251": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "RETURN",
      "path": "2"
    },
    "252": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1738,
        2091
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "253": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1738,
        2091
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "256": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1738,
        2091
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x32A"
    },
    "259": {
      "fn": "DetermineUser.createMapping",
      "jump": "i",
      "offset": [
        1738,
        2091
      ],
      "op": "JUMP",
      "path": "2"
    },
    "260": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1738,
        2091
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "261": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1738,
        2091
      ],
      "op": "STOP",
      "path": "2"
    },
    "262": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "263": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "266": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x114"
    },
    "269": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "270": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "272": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDDE"
    },
    "275": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5143,
        5628
      ],
      "op": "JUMP",
      "path": "2"
    },
    "276": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "277": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x414"
    },
    "280": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5143,
        5628
      ],
      "op": "JUMP",
      "path": "2"
    },
    "281": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "282": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x121"
    },
    "285": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x612"
    },
    "288": {
      "fn": "DetermineUser.people_list",
      "jump": "i",
      "offset": [
        4948,
        5066
      ],
      "op": "JUMP",
      "path": "2"
    },
    "289": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "290": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "292": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "293": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF3"
    },
    "296": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "297": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "298": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE42"
    },
    "301": {
      "fn": "DetermineUser.people_list",
      "jump": "i",
      "offset": [
        4948,
        5066
      ],
      "op": "JUMP",
      "path": "2"
    },
    "302": {
      "offset": [
        1678,
        1727
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "303": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x141"
    },
    "306": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13C"
    },
    "309": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "310": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "312": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE8F"
    },
    "315": {
      "fn": "DetermineUser.people_list",
      "jump": "i",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMP",
      "path": "2"
    },
    "316": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "317": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x674"
    },
    "320": {
      "fn": "DetermineUser.people_list",
      "jump": "i",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMP",
      "path": "2"
    },
    "321": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "322": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "324": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "331": {
      "op": "SHL"
    },
    "332": {
      "op": "SUB"
    },
    "333": {
      "op": "SWAP1"
    },
    "334": {
      "op": "SWAP2"
    },
    "335": {
      "op": "AND"
    },
    "336": {
      "op": "DUP2"
    },
    "337": {
      "op": "MSTORE"
    },
    "338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "340": {
      "op": "ADD"
    },
    "341": {
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF3"
    },
    "344": {
      "op": "JUMP"
    },
    "345": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "346": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x104"
    },
    "349": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6AC"
    },
    "352": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "353": {
      "offset": [
        1620,
        1672
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "354": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18F"
    },
    "357": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16F"
    },
    "360": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "361": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "363": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBB"
    },
    "366": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1620,
        1672
      ],
      "op": "JUMP",
      "path": "2"
    },
    "367": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "368": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP1",
      "path": "2"
    },
    "369": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "370": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "372": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP2",
      "path": "2"
    },
    "373": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP4",
      "path": "2"
    },
    "374": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "ADD",
      "path": "2"
    },
    "375": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP2",
      "path": "2"
    },
    "376": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "ADD",
      "path": "2"
    },
    "377": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP1",
      "path": "2"
    },
    "378": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "379": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "381": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP3",
      "path": "2"
    },
    "382": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "383": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "384": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP3",
      "path": "2"
    },
    "385": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "ADD",
      "path": "2"
    },
    "386": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "387": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "388": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "389": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "ADD",
      "path": "2"
    },
    "390": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "391": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "392": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "393": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "394": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "396": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "AND",
      "path": "2"
    },
    "397": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "DUP2",
      "path": "2"
    },
    "398": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "JUMP",
      "path": "2"
    },
    "399": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "400": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "402": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "403": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF3"
    },
    "406": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "407": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "408": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1620,
        1672
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF2C"
    },
    "411": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1620,
        1672
      ],
      "op": "JUMP",
      "path": "2"
    },
    "412": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "413": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "415": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "416": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "420": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "422": {
      "op": "SHL"
    },
    "423": {
      "op": "SUB"
    },
    "424": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "425": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x141"
    },
    "428": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMP",
      "path": "0"
    },
    "429": {
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "430": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C0"
    },
    "433": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1BB"
    },
    "436": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "437": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "439": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF3F"
    },
    "442": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "443": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "444": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x712"
    },
    "447": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "448": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "449": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "451": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "452": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF3"
    },
    "455": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "456": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "457": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "458": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "459": {
      "fn": "Ownable.owner",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF84"
    },
    "462": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "463": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "464": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE7"
    },
    "467": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1DD"
    },
    "470": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "471": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "473": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFD7"
    },
    "476": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        3793,
        4545
      ],
      "op": "JUMP",
      "path": "2"
    },
    "477": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "478": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7DA"
    },
    "481": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        3793,
        4545
      ],
      "op": "JUMP",
      "path": "2"
    },
    "482": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "483": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "486": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F0"
    },
    "489": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "490": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "492": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x107C"
    },
    "495": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2287,
        3222
      ],
      "op": "JUMP",
      "path": "2"
    },
    "496": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "497": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x914"
    },
    "500": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2287,
        3222
      ],
      "op": "JUMP",
      "path": "2"
    },
    "501": {
      "offset": [
        1565,
        1614
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "502": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18F"
    },
    "505": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x203"
    },
    "508": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "509": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "511": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBB"
    },
    "514": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        1565,
        1614
      ],
      "op": "JUMP",
      "path": "2"
    },
    "515": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "516": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP1",
      "path": "2"
    },
    "517": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "518": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "520": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP2",
      "path": "2"
    },
    "521": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP4",
      "path": "2"
    },
    "522": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "ADD",
      "path": "2"
    },
    "523": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP2",
      "path": "2"
    },
    "524": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "ADD",
      "path": "2"
    },
    "525": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP1",
      "path": "2"
    },
    "526": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "527": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "529": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP3",
      "path": "2"
    },
    "530": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "531": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "532": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP3",
      "path": "2"
    },
    "533": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "ADD",
      "path": "2"
    },
    "534": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "535": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "536": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "537": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "ADD",
      "path": "2"
    },
    "538": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "539": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "540": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "541": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "542": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "544": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "AND",
      "path": "2"
    },
    "545": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "DUP2",
      "path": "2"
    },
    "546": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        1565,
        1614
      ],
      "op": "JUMP",
      "path": "2"
    },
    "547": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "548": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x104"
    },
    "551": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x231"
    },
    "554": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "555": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "557": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1129"
    },
    "560": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "561": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "562": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xADA"
    },
    "565": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "566": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "567": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3326,
        3330
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "569": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3326,
        3330
      ],
      "op": "DUP1",
      "path": "2"
    },
    "570": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3326,
        3330
      ],
      "op": "DUP1",
      "path": "2"
    },
    "571": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3474
      ],
      "op": "DUP4",
      "path": "2"
    },
    "572": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "574": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "DUP2",
      "path": "2"
    },
    "575": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "GT",
      "path": "2"
    },
    "576": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "577": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x24C"
    },
    "580": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "581": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x24C"
    },
    "584": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "587": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3459,
        3488
      ],
      "op": "JUMP",
      "path": "2"
    },
    "588": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "589": {
      "branch": 35,
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3459,
        3488
      ],
      "op": "EQ",
      "path": "2"
    },
    "590": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3455,
        3504
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "591": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3455,
        3504
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x256"
    },
    "594": {
      "branch": 35,
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3455,
        3504
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "595": {
      "op": "POP"
    },
    "596": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3498,
        3502
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0x1"
    },
    "598": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3455,
        3504
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "599": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3579,
        3585
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "601": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "602": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "604": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "606": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3608,
        3623
      ],
      "op": "DUP6",
      "path": "2"
    },
    "607": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "609": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "DUP2",
      "path": "2"
    },
    "610": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "GT",
      "path": "2"
    },
    "611": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "612": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26F"
    },
    "615": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "616": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26F"
    },
    "619": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "622": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3595,
        3624
      ],
      "op": "JUMP",
      "path": "2"
    },
    "623": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "624": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "626": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "DUP2",
      "path": "2"
    },
    "627": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "GT",
      "path": "2"
    },
    "628": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "629": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x280"
    },
    "632": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "633": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x280"
    },
    "636": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "639": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3595,
        3624
      ],
      "op": "JUMP",
      "path": "2"
    },
    "640": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "641": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "DUP2",
      "path": "2"
    },
    "642": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "643": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "645": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "DUP2",
      "path": "2"
    },
    "646": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "ADD",
      "path": "2"
    },
    "647": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "648": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "649": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "650": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "651": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "653": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "ADD",
      "path": "2"
    },
    "654": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "656": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3624
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "657": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3595,
        3631
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "658": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3591,
        3631
      ],
      "op": "DUP2",
      "path": "2"
    },
    "659": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3591,
        3631
      ],
      "op": "LT",
      "path": "2"
    },
    "660": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "661": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x322"
    },
    "664": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "665": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3690,
        3705
      ],
      "op": "DUP5",
      "path": "2"
    },
    "666": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "668": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "670": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "672": {
      "op": "SHL"
    },
    "673": {
      "op": "SUB"
    },
    "674": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3705
      ],
      "op": "AND",
      "path": "2"
    },
    "675": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3668
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "677": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "679": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3669,
        3684
      ],
      "op": "DUP7",
      "path": "2"
    },
    "680": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "682": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "DUP2",
      "path": "2"
    },
    "683": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "GT",
      "path": "2"
    },
    "684": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "685": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2B8"
    },
    "688": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "689": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2B8"
    },
    "692": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "695": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3656,
        3685
      ],
      "op": "JUMP",
      "path": "2"
    },
    "696": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "697": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "699": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "DUP2",
      "path": "2"
    },
    "700": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "GT",
      "path": "2"
    },
    "701": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "702": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C9"
    },
    "705": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "706": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C9"
    },
    "709": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "712": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3656,
        3685
      ],
      "op": "JUMP",
      "path": "2"
    },
    "713": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "714": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "DUP2",
      "path": "2"
    },
    "715": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "716": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "718": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "ADD",
      "path": "2"
    },
    "719": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "720": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "DUP2",
      "path": "2"
    },
    "721": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "722": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "724": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "ADD",
      "path": "2"
    },
    "725": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "727": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3685
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "728": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3686,
        3687
      ],
      "op": "DUP3",
      "path": "2"
    },
    "729": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "DUP2",
      "path": "2"
    },
    "730": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "731": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "DUP2",
      "path": "2"
    },
    "732": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "LT",
      "path": "2"
    },
    "733": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2E8"
    },
    "736": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "737": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2E8"
    },
    "740": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1144"
    },
    "743": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3656,
        3688
      ],
      "op": "JUMP",
      "path": "2"
    },
    "744": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "745": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "747": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "748": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "DUP3",
      "path": "2"
    },
    "749": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "750": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "752": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "753": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "754": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "755": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "ADD",
      "path": "2"
    },
    "756": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "761": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "763": {
      "op": "SHL"
    },
    "764": {
      "op": "SUB"
    },
    "765": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3688
      ],
      "op": "AND",
      "path": "2"
    },
    "766": {
      "branch": 36,
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3656,
        3705
      ],
      "op": "EQ",
      "path": "2"
    },
    "767": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3652,
        3747
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "768": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3652,
        3747
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x30C"
    },
    "771": {
      "branch": 36,
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3652,
        3747
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "772": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3714,
        3718
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 2,
      "value": "0x1"
    },
    "774": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3707,
        3718
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "775": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3707,
        3718
      ],
      "op": "POP",
      "path": "2"
    },
    "776": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3719,
        3724
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 3,
      "value": "0x322"
    },
    "779": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3719,
        3724
      ],
      "op": "JUMP",
      "path": "2"
    },
    "780": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3652,
        3747
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "781": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3740,
        3745
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 4,
      "value": "0x0"
    },
    "783": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3733,
        3745
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "784": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3733,
        3745
      ],
      "op": "POP",
      "path": "2"
    },
    "785": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 5
    },
    "786": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x31A"
    },
    "789": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "DUP2",
      "path": "2"
    },
    "790": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x115A"
    },
    "793": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "i",
      "offset": [
        3633,
        3636
      ],
      "op": "JUMP",
      "path": "2"
    },
    "794": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "795": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "796": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "POP",
      "path": "2"
    },
    "797": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3633,
        3636
      ],
      "op": "POP",
      "path": "2"
    },
    "798": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x259"
    },
    "801": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "JUMP",
      "path": "2"
    },
    "802": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3574,
        3758
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "803": {
      "op": "POP"
    },
    "804": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3774,
        3780
      ],
      "op": "SWAP4",
      "path": "2",
      "statement": 6
    },
    "805": {
      "fn": "DetermineUser.checkOrgList",
      "offset": [
        3233,
        3788
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "806": {
      "op": "POP"
    },
    "807": {
      "op": "POP"
    },
    "808": {
      "op": "POP"
    },
    "809": {
      "fn": "DetermineUser.checkOrgList",
      "jump": "o",
      "offset": [
        3233,
        3788
      ],
      "op": "JUMP",
      "path": "2"
    },
    "810": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1738,
        2091
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "811": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1908,
        1922
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 7,
      "value": "0x1"
    },
    "813": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "815": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "DUP2",
      "path": "2"
    },
    "816": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "817": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "818": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1893
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "820": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "822": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "823": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1922
      ],
      "op": "DUP1",
      "path": "2"
    },
    "824": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1922
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "825": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1922
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x363"
    },
    "828": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1922
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "829": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x92E85D02570A8092D09A6E3A57665BC3815A2699A4074001BF1CCABF660F5A36"
    },
    "862": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1906
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "863": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1922
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBEE"
    },
    "866": {
      "fn": "DetermineUser.createMapping",
      "jump": "i",
      "offset": [
        1881,
        1922
      ],
      "op": "JUMP",
      "path": "2"
    },
    "867": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1881,
        1922
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "868": {
      "op": "POP"
    },
    "869": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1959,
        1973
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 8,
      "value": "0x2"
    },
    "871": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "873": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "DUP2",
      "path": "2"
    },
    "874": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "875": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "876": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1944
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "878": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "880": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "881": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1973
      ],
      "op": "DUP1",
      "path": "2"
    },
    "882": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1973
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "883": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1973
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x39D"
    },
    "886": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1973
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "887": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x6CDE3CEA4B3A3FB2488B2808BAE7556F4A405E50F65E1794383BC026131B13C3"
    },
    "920": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1957
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "921": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1973
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBEE"
    },
    "924": {
      "fn": "DetermineUser.createMapping",
      "jump": "i",
      "offset": [
        1932,
        1973
      ],
      "op": "JUMP",
      "path": "2"
    },
    "925": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1932,
        1973
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "926": {
      "op": "POP"
    },
    "927": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2010,
        2024
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 9,
      "value": "0x3"
    },
    "929": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "931": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "DUP2",
      "path": "2"
    },
    "932": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "933": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "934": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        1995
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "936": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "938": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "939": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2024
      ],
      "op": "DUP1",
      "path": "2"
    },
    "940": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2024
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "941": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2024
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3D7"
    },
    "944": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2024
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "945": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xC575C31FEA594A6EB97C8E9D3F9CAEE4C16218C6EF37E923234C0FE9014A61E7"
    },
    "978": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2008
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "979": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2024
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBEE"
    },
    "982": {
      "fn": "DetermineUser.createMapping",
      "jump": "i",
      "offset": [
        1983,
        2024
      ],
      "op": "JUMP",
      "path": "2"
    },
    "983": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        1983,
        2024
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "984": {
      "op": "POP"
    },
    "985": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2061,
        2075
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 10,
      "value": "0x4"
    },
    "987": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "989": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "DUP2",
      "path": "2"
    },
    "990": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "991": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "992": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2046
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "994": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "996": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "997": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "DUP1",
      "path": "2"
    },
    "998": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "999": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x411"
    },
    "1002": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1003": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x8DC18C4CCFD75F5C815B63770FA542FD953E8FEF7E0E44BBDD4913470CE7E9CB"
    },
    "1036": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2059
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1037": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBEE"
    },
    "1040": {
      "fn": "DetermineUser.createMapping",
      "jump": "i",
      "offset": [
        2034,
        2075
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1041": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1042": {
      "fn": "DetermineUser.createMapping",
      "offset": [
        2034,
        2075
      ],
      "op": "POP",
      "path": "2"
    },
    "1043": {
      "fn": "DetermineUser.createMapping",
      "jump": "o",
      "offset": [
        1738,
        2091
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1044": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1045": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5260,
        5270
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1046": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5272,
        5288
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1047": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5290,
        5305
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1048": {
      "offset": [
        4769,
        4815
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x421"
    },
    "1051": {
      "offset": [
        4782,
        4797
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1052": {
      "offset": [
        4799,
        4814
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1053": {
      "offset": [
        4769,
        4781
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x236"
    },
    "1056": {
      "jump": "i",
      "offset": [
        4769,
        4815
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1057": {
      "branch": 37,
      "fn": "DetermineUser.addPerson",
      "offset": [
        4769,
        4815
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1058": {
      "offset": [
        4761,
        4836
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x465"
    },
    "1061": {
      "branch": 37,
      "offset": [
        4761,
        4836
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1062": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1064": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1065": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1071": {
      "op": "SHL"
    },
    "1072": {
      "offset": [
        4761,
        4836
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1073": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1074": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1076": {
      "offset": [
        4761,
        4836
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1078": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1079": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "ADD",
      "path": "2"
    },
    "1080": {
      "op": "MSTORE"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0x10"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1085": {
      "op": "DUP3"
    },
    "1086": {
      "op": "ADD"
    },
    "1087": {
      "op": "MSTORE"
    },
    "1088": {
      "op": "PUSH16",
      "value": "0x596F752063616E7420646F2074686973"
    },
    "1105": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1107": {
      "op": "SHL"
    },
    "1108": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1110": {
      "op": "DUP3"
    },
    "1111": {
      "op": "ADD"
    },
    "1112": {
      "op": "MSTORE"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1115": {
      "op": "ADD"
    },
    "1116": {
      "offset": [
        4761,
        4836
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1117": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1119": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1120": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1121": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1122": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "SUB",
      "path": "2"
    },
    "1123": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1124": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "1125": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4761,
        4836
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1126": {
      "offset": [
        4854,
        4902
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x46F"
    },
    "1129": {
      "offset": [
        4868,
        4883
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1130": {
      "offset": [
        4885,
        4901
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1131": {
      "offset": [
        4854,
        4867
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7DA"
    },
    "1134": {
      "jump": "i",
      "offset": [
        4854,
        4902
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1135": {
      "branch": 38,
      "fn": "DetermineUser.addPerson",
      "offset": [
        4854,
        4902
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1136": {
      "offset": [
        4846,
        4923
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4AE"
    },
    "1139": {
      "branch": 38,
      "offset": [
        4846,
        4923
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1140": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4846,
        4923
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1142": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4846,
        4923
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1143": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1147": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1149": {
      "op": "SHL"
    },
    "1150": {
      "offset": [
        4846,
        4923
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1151": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4846,
        4923
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1152": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1154": {
      "offset": [
        4846,
        4923
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1156": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4846,
        4923
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1157": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        4846,
        4923
      ],
      "op": "ADD",
      "path": "2"
    },
    "1158": {
      "op": "MSTORE"
    },
    "1159": {
      "op": "PUSH1",
      "value": "0x10"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1163": {
      "op": "DUP3"
    },
    "1164": {
      "op": "ADD"
    },
    "1165": {
      "op": "MSTORE"
    },
    "1166": {
      "op": "PUSH16",
      "value": "0x596F752063616E7420646F2074686973"
    },
    "1183": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1185": {
      "op": "SHL"
    },
    "1186": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1188": {
      "op": "DUP3"
    },
    "1189": {
      "op": "ADD"
    },
    "1190": {
      "op": "MSTORE"
    },
    "1191": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1193": {
      "op": "ADD"
    },
    "1194": {
      "offset": [
        4846,
        4923
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x45C"
    },
    "1197": {
      "op": "JUMP"
    },
    "1198": {
      "offset": [
        4846,
        4923
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1199": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5478
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 11,
      "value": "0x6"
    },
    "1201": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1203": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1204": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1205": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1207": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "ADD",
      "path": "2"
    },
    "1208": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1210": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1211": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1212": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5492,
        5497
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1213": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1214": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1215": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1217": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "ADD",
      "path": "2"
    },
    "1218": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5499,
        5515
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1219": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1221": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1222": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "GT",
      "path": "2"
    },
    "1223": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1224": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4D3"
    },
    "1227": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1228": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4D3"
    },
    "1231": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "1234": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5484,
        5533
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1235": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1236": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1237": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1238": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1240": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "ADD",
      "path": "2"
    },
    "1241": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5517,
        5532
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1242": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1244": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1245": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "GT",
      "path": "2"
    },
    "1246": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1247": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4EA"
    },
    "1250": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1251": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4EA"
    },
    "1254": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "1257": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5484,
        5533
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1258": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1259": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1260": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5484,
        5533
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1261": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1262": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1263": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1265": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1266": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1267": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1268": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1269": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1271": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1272": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1273": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1274": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1276": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1277": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1278": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1279": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1280": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1281": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1282": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1283": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1284": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1285": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1286": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1288": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1289": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1290": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MUL",
      "path": "2"
    },
    "1291": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1292": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1293": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1294": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1295": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x51B"
    },
    "1298": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1299": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1300": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1301": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1302": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1303": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC3E"
    },
    "1306": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1307": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1308": {
      "op": "POP"
    },
    "1309": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1311": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1312": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1313": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1314": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1316": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1317": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1318": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1319": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1320": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1321": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1322": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1323": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1325": {
      "op": "NOT"
    },
    "1326": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1327": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1328": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "AND",
      "path": "2"
    },
    "1329": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1330": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1331": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1333": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1334": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "GT",
      "path": "2"
    },
    "1335": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1336": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x543"
    },
    "1339": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1340": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x543"
    },
    "1343": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "1346": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1347": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1348": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MUL",
      "path": "2"
    },
    "1349": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "OR",
      "path": "2"
    },
    "1350": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1351": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1352": {
      "op": "POP"
    },
    "1353": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1355": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1356": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1357": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1358": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1360": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1361": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ADD",
      "path": "2"
    },
    "1362": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1363": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1364": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "1367": {
      "op": "NOT"
    },
    "1368": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "AND",
      "path": "2"
    },
    "1369": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "1372": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1373": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1375": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1376": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "GT",
      "path": "2"
    },
    "1377": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1378": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x56D"
    },
    "1381": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1382": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x56D"
    },
    "1385": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "1388": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1389": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1390": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "MUL",
      "path": "2"
    },
    "1391": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "OR",
      "path": "2"
    },
    "1392": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1393": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5472,
        5534
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1394": {
      "op": "POP"
    },
    "1395": {
      "op": "POP"
    },
    "1396": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 12,
      "value": "0x5"
    },
    "1398": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1399": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1401": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1402": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "1404": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1405": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1406": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "AND",
      "path": "2"
    },
    "1407": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5571,
        5579
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1408": {
      "op": "POP"
    },
    "1409": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5562
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "1411": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5562
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1412": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x58E"
    },
    "1415": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1416": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5563,
        5568
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1417": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5563,
        5568
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1418": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1183"
    },
    "1421": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5544,
        5569
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1422": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1423": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1424": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1425": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1426": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1428": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1429": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1430": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1431": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1432": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "SUB",
      "path": "2"
    },
    "1433": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1435": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "ADD",
      "path": "2"
    },
    "1436": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1437": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5569
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1438": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1439": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1440": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1442": {
      "op": "NOT"
    },
    "1443": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "AND",
      "path": "2"
    },
    "1444": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1446": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1447": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1449": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1450": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "GT",
      "path": "2"
    },
    "1451": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1452": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5B7"
    },
    "1455": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1456": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5B7"
    },
    "1459": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "1462": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5544,
        5579
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1463": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1464": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "MUL",
      "path": "2"
    },
    "1465": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "OR",
      "path": "2"
    },
    "1466": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1467": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1468": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5544,
        5579
      ],
      "op": "POP",
      "path": "2"
    },
    "1469": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 13,
      "value": "0x5"
    },
    "1471": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1473": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1474": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1475": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1476": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "1479": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "EXP",
      "path": "2"
    },
    "1480": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1481": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "DIV",
      "path": "2"
    },
    "1482": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "1484": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5612,
        5621
      ],
      "op": "AND",
      "path": "2"
    },
    "1485": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "1487": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5604,
        5609
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1488": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1490": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1491": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5DC"
    },
    "1494": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1495": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1496": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1183"
    },
    "1499": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5589,
        5610
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1500": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1501": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1502": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1503": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1504": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1506": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1507": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1508": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1509": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1510": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SUB",
      "path": "2"
    },
    "1511": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1513": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "ADD",
      "path": "2"
    },
    "1514": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1515": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5610
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1516": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1517": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1518": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1520": {
      "op": "NOT"
    },
    "1521": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "AND",
      "path": "2"
    },
    "1522": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1524": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1525": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1527": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1528": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "GT",
      "path": "2"
    },
    "1529": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1530": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x605"
    },
    "1533": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1534": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x605"
    },
    "1537": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "1540": {
      "fn": "DetermineUser.addPerson",
      "jump": "i",
      "offset": [
        5589,
        5621
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1541": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1542": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "MUL",
      "path": "2"
    },
    "1543": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "OR",
      "path": "2"
    },
    "1544": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1545": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1546": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5589,
        5621
      ],
      "op": "POP",
      "path": "2"
    },
    "1547": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "POP",
      "path": "2"
    },
    "1548": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "POP",
      "path": "2"
    },
    "1549": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "POP",
      "path": "2"
    },
    "1550": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "POP",
      "path": "2"
    },
    "1551": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "POP",
      "path": "2"
    },
    "1552": {
      "fn": "DetermineUser.addPerson",
      "offset": [
        5143,
        5628
      ],
      "op": "POP",
      "path": "2"
    },
    "1553": {
      "fn": "DetermineUser.addPerson",
      "jump": "o",
      "offset": [
        5143,
        5628
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1554": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1555": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4992,
        5008
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1557": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5045,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 14,
      "value": "0x1"
    },
    "1559": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1560": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1561": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1562": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1564": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MUL",
      "path": "2"
    },
    "1565": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1567": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ADD",
      "path": "2"
    },
    "1568": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1570": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1571": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1572": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1573": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ADD",
      "path": "2"
    },
    "1574": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1576": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1577": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1578": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1579": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1580": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1581": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1582": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1583": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1584": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1586": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ADD",
      "path": "2"
    },
    "1587": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1588": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1589": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1590": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1591": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1592": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66A"
    },
    "1595": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1596": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1598": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MUL",
      "path": "2"
    },
    "1599": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1600": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ADD",
      "path": "2"
    },
    "1601": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1602": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1603": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1605": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1606": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1608": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1610": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1611": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1612": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1613": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1614": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1615": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1617": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1619": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1621": {
      "op": "SHL"
    },
    "1622": {
      "op": "SUB"
    },
    "1623": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "AND",
      "path": "2"
    },
    "1624": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1625": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1626": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1628": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1629": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1630": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ADD",
      "path": "2"
    },
    "1631": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1632": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1634": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "ADD",
      "path": "2"
    },
    "1635": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1636": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1637": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "GT",
      "path": "2"
    },
    "1638": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x64C"
    },
    "1641": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1642": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1643": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "POP",
      "path": "2"
    },
    "1644": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "POP",
      "path": "2"
    },
    "1645": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "POP",
      "path": "2"
    },
    "1646": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "POP",
      "path": "2"
    },
    "1647": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "POP",
      "path": "2"
    },
    "1648": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1649": {
      "fn": "DetermineUser.people_list",
      "offset": [
        5038,
        5059
      ],
      "op": "POP",
      "path": "2"
    },
    "1650": {
      "fn": "DetermineUser.people_list",
      "offset": [
        4948,
        5066
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1651": {
      "fn": "DetermineUser.people_list",
      "jump": "o",
      "offset": [
        4948,
        5066
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1652": {
      "offset": [
        1678,
        1727
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1653": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "1655": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1657": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1658": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1659": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1661": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1662": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1664": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1666": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1667": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1668": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1669": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1670": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1671": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "LT",
      "path": "2"
    },
    "1672": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x690"
    },
    "1675": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1676": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1678": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1679": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1680": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1681": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1683": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1684": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1685": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1686": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1688": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1689": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1690": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1691": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "ADD",
      "path": "2"
    },
    "1692": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1695": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1697": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1699": {
      "op": "SHL"
    },
    "1700": {
      "op": "SUB"
    },
    "1701": {
      "offset": [
        1678,
        1727
      ],
      "op": "AND",
      "path": "2"
    },
    "1702": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1703": {
      "op": "POP"
    },
    "1704": {
      "offset": [
        1678,
        1727
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1705": {
      "fn": "DetermineUser.people_list",
      "offset": [
        1678,
        1727
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1706": {
      "op": "POP"
    },
    "1707": {
      "jump": "o",
      "offset": [
        1678,
        1727
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1708": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1709": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1711": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1712": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1714": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1716": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1718": {
      "op": "SHL"
    },
    "1719": {
      "op": "SUB"
    },
    "1720": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "1721": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 15
    },
    "1722": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1723": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x706"
    },
    "1726": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1727": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1729": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1730": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1734": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1736": {
      "op": "SHL"
    },
    "1737": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1738": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1741": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1743": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1744": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1745": {
      "op": "DUP2"
    },
    "1746": {
      "op": "SWAP1"
    },
    "1747": {
      "op": "MSTORE"
    },
    "1748": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1750": {
      "op": "DUP3"
    },
    "1751": {
      "op": "ADD"
    },
    "1752": {
      "op": "MSTORE"
    },
    "1753": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "1786": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1788": {
      "op": "DUP3"
    },
    "1789": {
      "op": "ADD"
    },
    "1790": {
      "op": "MSTORE"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1793": {
      "op": "ADD"
    },
    "1794": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45C"
    },
    "1797": {
      "op": "JUMP"
    },
    "1798": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1799": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 16,
      "value": "0x710"
    },
    "1802": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1759,
        1760
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1804": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1750
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB9E"
    },
    "1807": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1808": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1809": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1810": {
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1811": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "1813": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1814": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1815": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1816": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1817": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "LT",
      "path": "2"
    },
    "1818": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x722"
    },
    "1821": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1822": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1824": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1825": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1826": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1827": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1828": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1830": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1831": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1833": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1835": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1836": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1837": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1839": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MUL",
      "path": "2"
    },
    "1840": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1841": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1843": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1844": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "POP",
      "path": "2"
    },
    "1845": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1846": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "POP",
      "path": "2"
    },
    "1847": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1848": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1850": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1851": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1852": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1853": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x745"
    },
    "1856": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1857": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x119F"
    },
    "1860": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1861": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1862": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1863": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1865": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1866": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1868": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1869": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1870": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DIV",
      "path": "2"
    },
    "1871": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MUL",
      "path": "2"
    },
    "1872": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1874": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1875": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1877": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1878": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1879": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1880": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1881": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1883": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1884": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1885": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1886": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1887": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1888": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1889": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1890": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1891": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1893": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1894": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1895": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1896": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1897": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x771"
    },
    "1900": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1901": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x119F"
    },
    "1904": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1905": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1906": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1907": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1908": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7BE"
    },
    "1911": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1912": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1913": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1915": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "LT",
      "path": "2"
    },
    "1916": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x793"
    },
    "1919": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1920": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "1923": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1924": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1925": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1926": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DIV",
      "path": "2"
    },
    "1927": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MUL",
      "path": "2"
    },
    "1928": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1929": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1930": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1931": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1933": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1934": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1935": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7BE"
    },
    "1938": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1939": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1940": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1941": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1942": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1943": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1944": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1946": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1947": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1949": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1951": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1952": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1953": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1954": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1955": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1956": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1957": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1958": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1959": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1961": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1962": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1963": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1965": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1966": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1967": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1968": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "GT",
      "path": "2"
    },
    "1969": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7A1"
    },
    "1972": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1973": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1974": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1975": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SUB",
      "path": "2"
    },
    "1976": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1978": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "AND",
      "path": "2"
    },
    "1979": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1980": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1981": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1982": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1983": {
      "op": "POP"
    },
    "1984": {
      "op": "POP"
    },
    "1985": {
      "op": "POP"
    },
    "1986": {
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1988": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1989": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1990": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "ADD",
      "path": "2"
    },
    "1991": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1992": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1993": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1994": {
      "op": "POP"
    },
    "1995": {
      "op": "POP"
    },
    "1996": {
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "1998": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1999": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2000": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "AND",
      "path": "2"
    },
    "2001": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2002": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "2005": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2006": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DIV",
      "path": "2"
    },
    "2007": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "AND",
      "path": "2"
    },
    "2008": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1537,
        1559
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2009": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1537,
        1559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2010": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2011": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3888,
        3892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2013": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3888,
        3892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2014": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4054,
        4065
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2016": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4052
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2017": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2019": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2020": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "GT",
      "path": "2"
    },
    "2021": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2022": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7F1"
    },
    "2025": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2026": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7F1"
    },
    "2029": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2032": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4037,
        4065
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2033": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2034": {
      "branch": 39,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4065
      ],
      "op": "EQ",
      "path": "2"
    },
    "2035": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4097
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2036": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4097
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80E"
    },
    "2039": {
      "branch": 39,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4097
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2040": {
      "op": "POP"
    },
    "2041": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4086,
        4097
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2043": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4084
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2044": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2046": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2047": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "GT",
      "path": "2"
    },
    "2048": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2049": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80C"
    },
    "2052": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2053": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80C"
    },
    "2056": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2059": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4069,
        4097
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2060": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2061": {
      "branch": 40,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4069,
        4097
      ],
      "op": "EQ",
      "path": "2"
    },
    "2062": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4097
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2063": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4129
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2064": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4129
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x82A"
    },
    "2067": {
      "branch": 40,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4129
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2068": {
      "op": "POP"
    },
    "2069": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4118,
        4129
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2071": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4116
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2072": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2074": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2075": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "GT",
      "path": "2"
    },
    "2076": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2077": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x828"
    },
    "2080": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2081": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x828"
    },
    "2084": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2087": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4101,
        4129
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2088": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2089": {
      "branch": 41,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4101,
        4129
      ],
      "op": "EQ",
      "path": "2"
    },
    "2090": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4037,
        4129
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2091": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4036,
        4165
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2092": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4036,
        4165
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2093": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4036,
        4165
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x847"
    },
    "2096": {
      "branch": 41,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4036,
        4165
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2097": {
      "op": "POP"
    },
    "2098": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4152,
        4165
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2100": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4150
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2101": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2103": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2104": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "GT",
      "path": "2"
    },
    "2105": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2106": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x845"
    },
    "2109": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2110": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x845"
    },
    "2113": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2116": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4134,
        4165
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2117": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2118": {
      "branch": 42,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4134,
        4165
      ],
      "op": "EQ",
      "path": "2"
    },
    "2119": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4036,
        4165
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2120": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4032,
        4506
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2121": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4032,
        4506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x854"
    },
    "2124": {
      "branch": 42,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4032,
        4506
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2125": {
      "op": "POP"
    },
    "2126": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4174,
        4178
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 17,
      "value": "0x1"
    },
    "2128": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4032,
        4506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x90D"
    },
    "2131": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4032,
        4506
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2132": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4032,
        4506
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2133": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4216,
        4227
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2135": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4214
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2136": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2138": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2139": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "GT",
      "path": "2"
    },
    "2140": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2141": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x868"
    },
    "2144": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2145": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x868"
    },
    "2148": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2151": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4199,
        4227
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2152": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2153": {
      "branch": 43,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4227
      ],
      "op": "EQ",
      "path": "2"
    },
    "2154": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4270
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2155": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4270
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2156": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4270
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x886"
    },
    "2159": {
      "branch": 43,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4270
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2160": {
      "op": "POP"
    },
    "2161": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4249,
        4270
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2163": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4247
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2164": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2166": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2167": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "GT",
      "path": "2"
    },
    "2168": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2169": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "2172": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2173": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "2176": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2179": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4231,
        4270
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2180": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2181": {
      "branch": 44,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4231,
        4270
      ],
      "op": "EQ",
      "path": "2"
    },
    "2182": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4199,
        4270
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2183": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4195,
        4506
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2184": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4195,
        4506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x893"
    },
    "2187": {
      "branch": 44,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4195,
        4506
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2188": {
      "op": "POP"
    },
    "2189": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4280,
        4284
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 18,
      "value": "0x1"
    },
    "2191": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4195,
        4506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x90D"
    },
    "2194": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4195,
        4506
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2195": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4195,
        4506
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2196": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4322,
        4334
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2198": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4320
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2199": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2201": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2202": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "GT",
      "path": "2"
    },
    "2203": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2204": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8A7"
    },
    "2207": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2208": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8A7"
    },
    "2211": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2214": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4305,
        4334
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2215": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2216": {
      "branch": 45,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4334
      ],
      "op": "EQ",
      "path": "2"
    },
    "2217": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4461
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2218": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4461
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2219": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4461
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FC"
    },
    "2222": {
      "branch": 45,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4305,
        4461
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2223": {
      "op": "POP"
    },
    "2224": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4357,
        4379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2226": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4355
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2227": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2229": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2230": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "GT",
      "path": "2"
    },
    "2231": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2232": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8C3"
    },
    "2235": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2236": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8C3"
    },
    "2239": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2242": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4339,
        4379
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2243": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2244": {
      "branch": 46,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4379
      ],
      "op": "EQ",
      "path": "2"
    },
    "2245": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4425
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2246": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4425
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8E0"
    },
    "2249": {
      "branch": 46,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4425
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2250": {
      "op": "POP"
    },
    "2251": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4401,
        4425
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2253": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4399
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2254": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2256": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2257": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "GT",
      "path": "2"
    },
    "2258": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2259": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8DE"
    },
    "2262": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2263": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8DE"
    },
    "2266": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2269": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4383,
        4425
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2270": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2271": {
      "branch": 47,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4383,
        4425
      ],
      "op": "EQ",
      "path": "2"
    },
    "2272": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4425
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2273": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4460
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2274": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4460
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FC"
    },
    "2277": {
      "branch": 47,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4460
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2278": {
      "op": "POP"
    },
    "2279": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4447,
        4460
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2281": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4445
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2282": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2284": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2285": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "GT",
      "path": "2"
    },
    "2286": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2287": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FA"
    },
    "2290": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2291": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FA"
    },
    "2294": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF8"
    },
    "2297": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "i",
      "offset": [
        4429,
        4460
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2298": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2299": {
      "branch": 48,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4429,
        4460
      ],
      "op": "EQ",
      "path": "2"
    },
    "2300": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4339,
        4460
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2301": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2302": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x909"
    },
    "2305": {
      "branch": 48,
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2306": {
      "op": "POP"
    },
    "2307": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4470,
        4474
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 19,
      "value": "0x1"
    },
    "2309": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x90D"
    },
    "2312": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2313": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2314": {
      "op": "POP"
    },
    "2315": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4499,
        4504
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 20,
      "value": "0x0"
    },
    "2317": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4301,
        4506
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2318": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        4531,
        4537
      ],
      "op": "SWAP4",
      "path": "2",
      "statement": 21
    },
    "2319": {
      "fn": "DetermineUser.checkTypeList",
      "offset": [
        3793,
        4545
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2320": {
      "op": "POP"
    },
    "2321": {
      "op": "POP"
    },
    "2322": {
      "op": "POP"
    },
    "2323": {
      "fn": "DetermineUser.checkTypeList",
      "jump": "o",
      "offset": [
        3793,
        4545
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2324": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2325": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2578,
        2584
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2327": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2328": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2590,
        2607
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2329": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2590,
        2614
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2330": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2588,
        2589
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2331": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2588,
        2614
      ],
      "op": "LT",
      "path": "2"
    },
    "2332": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2333": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x981"
    },
    "2336": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2337": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2649
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 22,
      "value": "0x1"
    },
    "2339": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2672
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2340": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2673,
        2674
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2341": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2342": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2343": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2344": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "LT",
      "path": "2"
    },
    "2345": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x934"
    },
    "2348": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2349": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x934"
    },
    "2352": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1144"
    },
    "2355": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2655,
        2675
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2356": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2357": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2359": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2360": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2361": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "MUL",
      "path": "2"
    },
    "2362": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2363": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2364": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2365": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "ADD",
      "path": "2"
    },
    "2366": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2367": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "ADD",
      "path": "2"
    },
    "2368": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2655,
        2675
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2369": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2370": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2371": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2373": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2374": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "ADD",
      "path": "2"
    },
    "2375": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2376": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2377": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2379": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2380": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2381": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2382": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2383": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2384": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2385": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2386": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "ADD",
      "path": "2"
    },
    "2387": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2388": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2391": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2393": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2395": {
      "op": "SHL"
    },
    "2396": {
      "op": "SUB"
    },
    "2397": {
      "op": "NOT"
    },
    "2398": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "AND",
      "path": "2"
    },
    "2399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2403": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2405": {
      "op": "SHL"
    },
    "2406": {
      "op": "SUB"
    },
    "2407": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2408": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2409": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "AND",
      "path": "2"
    },
    "2410": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2411": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2412": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2413": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "OR",
      "path": "2"
    },
    "2414": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2415": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2635,
        2676
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2416": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 23
    },
    "2417": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x979"
    },
    "2420": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2421": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x115A"
    },
    "2424": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2616,
        2619
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2425": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2426": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2427": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "POP",
      "path": "2"
    },
    "2428": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2616,
        2619
      ],
      "op": "POP",
      "path": "2"
    },
    "2429": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x917"
    },
    "2432": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2433": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2434": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2573,
        2687
      ],
      "op": "POP",
      "path": "2"
    },
    "2435": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2747,
        2753
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2437": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2438": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2759,
        2776
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2439": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2759,
        2783
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2440": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2757,
        2758
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2441": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2757,
        2783
      ],
      "op": "LT",
      "path": "2"
    },
    "2442": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2443": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9EF"
    },
    "2446": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2447": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2818
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 24,
      "value": "0x2"
    },
    "2449": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2841
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2450": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2842,
        2843
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2451": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2452": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2453": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2454": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "LT",
      "path": "2"
    },
    "2455": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9A2"
    },
    "2458": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2459": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9A2"
    },
    "2462": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1144"
    },
    "2465": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2824,
        2844
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2466": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2467": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2469": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2470": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2471": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "MUL",
      "path": "2"
    },
    "2472": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2473": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2474": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2475": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "ADD",
      "path": "2"
    },
    "2476": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2477": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "ADD",
      "path": "2"
    },
    "2478": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2824,
        2844
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2479": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2480": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2481": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2483": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2484": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "ADD",
      "path": "2"
    },
    "2485": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2486": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2487": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2489": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2490": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2491": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2492": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2493": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2494": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2495": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2496": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "ADD",
      "path": "2"
    },
    "2497": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2498": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2499": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2503": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2505": {
      "op": "SHL"
    },
    "2506": {
      "op": "SUB"
    },
    "2507": {
      "op": "NOT"
    },
    "2508": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "AND",
      "path": "2"
    },
    "2509": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2511": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2513": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2515": {
      "op": "SHL"
    },
    "2516": {
      "op": "SUB"
    },
    "2517": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2518": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2519": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "AND",
      "path": "2"
    },
    "2520": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2521": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2522": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2523": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "OR",
      "path": "2"
    },
    "2524": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2525": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2804,
        2845
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2526": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 25
    },
    "2527": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9E7"
    },
    "2530": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2531": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x115A"
    },
    "2534": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2785,
        2788
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2535": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2536": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2537": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "POP",
      "path": "2"
    },
    "2538": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2785,
        2788
      ],
      "op": "POP",
      "path": "2"
    },
    "2539": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x985"
    },
    "2542": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2543": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2544": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2742,
        2856
      ],
      "op": "POP",
      "path": "2"
    },
    "2545": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2915,
        2921
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2547": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2548": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2927,
        2944
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2549": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2927,
        2951
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2550": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2925,
        2926
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2551": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2925,
        2951
      ],
      "op": "LT",
      "path": "2"
    },
    "2552": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2553": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA5D"
    },
    "2556": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2557": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        2986
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 26,
      "value": "0x3"
    },
    "2559": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3009
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2560": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3010,
        3011
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2561": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2562": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2563": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2564": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "LT",
      "path": "2"
    },
    "2565": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA10"
    },
    "2568": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2569": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA10"
    },
    "2572": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1144"
    },
    "2575": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2992,
        3012
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2576": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2577": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2579": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2580": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2581": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "MUL",
      "path": "2"
    },
    "2582": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2583": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2584": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2585": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "ADD",
      "path": "2"
    },
    "2586": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2587": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "ADD",
      "path": "2"
    },
    "2588": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2992,
        3012
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2589": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2590": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2591": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2593": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2594": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "ADD",
      "path": "2"
    },
    "2595": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2596": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2597": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2599": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2600": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2601": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2602": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2603": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2604": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2605": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2606": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "ADD",
      "path": "2"
    },
    "2607": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2608": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2609": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2611": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2613": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2615": {
      "op": "SHL"
    },
    "2616": {
      "op": "SUB"
    },
    "2617": {
      "op": "NOT"
    },
    "2618": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "AND",
      "path": "2"
    },
    "2619": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2621": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2623": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2625": {
      "op": "SHL"
    },
    "2626": {
      "op": "SUB"
    },
    "2627": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2628": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2629": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "AND",
      "path": "2"
    },
    "2630": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2631": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2632": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2633": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "OR",
      "path": "2"
    },
    "2634": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2635": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2972,
        3013
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2636": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 27
    },
    "2637": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA55"
    },
    "2640": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2641": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x115A"
    },
    "2644": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        2953,
        2956
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2645": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2646": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2647": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "POP",
      "path": "2"
    },
    "2648": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2953,
        2956
      ],
      "op": "POP",
      "path": "2"
    },
    "2649": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9F3"
    },
    "2652": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2653": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2654": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2910,
        3024
      ],
      "op": "POP",
      "path": "2"
    },
    "2655": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3082,
        3088
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2657": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2658": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3094,
        3111
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2659": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3094,
        3118
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2660": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3092,
        3093
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2661": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3092,
        3118
      ],
      "op": "LT",
      "path": "2"
    },
    "2662": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2663": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xACB"
    },
    "2666": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2667": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3153
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 28,
      "value": "0x4"
    },
    "2669": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3176
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2670": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3177,
        3178
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2671": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2672": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2673": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2674": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "LT",
      "path": "2"
    },
    "2675": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA7E"
    },
    "2678": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2679": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA7E"
    },
    "2682": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1144"
    },
    "2685": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        3159,
        3179
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2686": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2687": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2689": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2690": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2691": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "MUL",
      "path": "2"
    },
    "2692": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2693": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2694": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2695": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "ADD",
      "path": "2"
    },
    "2696": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2697": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "ADD",
      "path": "2"
    },
    "2698": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3159,
        3179
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2699": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2700": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2701": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2703": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2704": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "ADD",
      "path": "2"
    },
    "2705": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2706": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2707": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2709": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2710": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2711": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2712": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2713": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2714": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2715": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2716": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "ADD",
      "path": "2"
    },
    "2717": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2718": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2725": {
      "op": "SHL"
    },
    "2726": {
      "op": "SUB"
    },
    "2727": {
      "op": "NOT"
    },
    "2728": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "AND",
      "path": "2"
    },
    "2729": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2731": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2733": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2735": {
      "op": "SHL"
    },
    "2736": {
      "op": "SUB"
    },
    "2737": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2738": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2739": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "AND",
      "path": "2"
    },
    "2740": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2741": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2742": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2743": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "OR",
      "path": "2"
    },
    "2744": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2745": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3139,
        3180
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2746": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 29
    },
    "2747": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC3"
    },
    "2750": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2751": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x115A"
    },
    "2754": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        3120,
        3123
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2755": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2756": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2757": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "POP",
      "path": "2"
    },
    "2758": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3120,
        3123
      ],
      "op": "POP",
      "path": "2"
    },
    "2759": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA61"
    },
    "2762": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2763": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2764": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3077,
        3191
      ],
      "op": "POP",
      "path": "2"
    },
    "2765": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3200,
        3215
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 30,
      "value": "0xAD4"
    },
    "2768": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3200,
        3213
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x32A"
    },
    "2771": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "i",
      "offset": [
        3200,
        3215
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2772": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        3200,
        3215
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2773": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "POP",
      "path": "2"
    },
    "2774": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "POP",
      "path": "2"
    },
    "2775": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "POP",
      "path": "2"
    },
    "2776": {
      "fn": "DetermineUser.changePrivateKeys",
      "offset": [
        2287,
        3222
      ],
      "op": "POP",
      "path": "2"
    },
    "2777": {
      "fn": "DetermineUser.changePrivateKeys",
      "jump": "o",
      "offset": [
        2287,
        3222
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2778": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2779": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2781": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2782": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2784": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2786": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2788": {
      "op": "SHL"
    },
    "2789": {
      "op": "SUB"
    },
    "2790": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "2791": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1"
    },
    "2792": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "2793": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB34"
    },
    "2796": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2797": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2799": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2800": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2804": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2806": {
      "op": "SHL"
    },
    "2807": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2808": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2809": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2811": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2813": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2814": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "2815": {
      "op": "DUP2"
    },
    "2816": {
      "op": "SWAP1"
    },
    "2817": {
      "op": "MSTORE"
    },
    "2818": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2820": {
      "op": "DUP3"
    },
    "2821": {
      "op": "ADD"
    },
    "2822": {
      "op": "MSTORE"
    },
    "2823": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2856": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2858": {
      "op": "DUP3"
    },
    "2859": {
      "op": "ADD"
    },
    "2860": {
      "op": "MSTORE"
    },
    "2861": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2863": {
      "op": "ADD"
    },
    "2864": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45C"
    },
    "2867": {
      "op": "JUMP"
    },
    "2868": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2869": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2871": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2873": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2875": {
      "op": "SHL"
    },
    "2876": {
      "op": "SUB"
    },
    "2877": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 31
    },
    "2878": {
      "branch": 49,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "AND",
      "path": "0"
    },
    "2879": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB99"
    },
    "2882": {
      "branch": 49,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2883": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2885": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2886": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2890": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2892": {
      "op": "SHL"
    },
    "2893": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2894": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2895": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2897": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2899": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2900": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "ADD",
      "path": "0"
    },
    "2901": {
      "op": "MSTORE"
    },
    "2902": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2904": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2906": {
      "op": "DUP3"
    },
    "2907": {
      "op": "ADD"
    },
    "2908": {
      "op": "MSTORE"
    },
    "2909": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "2942": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2944": {
      "op": "DUP3"
    },
    "2945": {
      "op": "ADD"
    },
    "2946": {
      "op": "MSTORE"
    },
    "2947": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "2954": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2956": {
      "op": "SHL"
    },
    "2957": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2959": {
      "op": "DUP3"
    },
    "2960": {
      "op": "ADD"
    },
    "2961": {
      "op": "MSTORE"
    },
    "2962": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2964": {
      "op": "ADD"
    },
    "2965": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45C"
    },
    "2968": {
      "op": "JUMP"
    },
    "2969": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2970": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 32,
      "value": "0x411"
    },
    "2973": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2100,
        2108
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2974": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2975": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2977": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2978": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2979": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2981": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2983": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2985": {
      "op": "SHL"
    },
    "2986": {
      "op": "SUB"
    },
    "2987": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 33
    },
    "2988": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2989": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "2990": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2992": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2994": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2996": {
      "op": "SHL"
    },
    "2997": {
      "op": "SUB"
    },
    "2998": {
      "op": "NOT"
    },
    "2999": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3000": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "3001": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3002": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "OR",
      "path": "0"
    },
    "3003": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3004": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3005": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 34,
      "value": "0x40"
    },
    "3007": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3008": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3009": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3010": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3011": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "AND",
      "path": "0"
    },
    "3012": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3013": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3014": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3015": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "3048": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3049": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3050": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "LOG3",
      "path": "0"
    },
    "3051": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2333,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "3052": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "3053": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3054": {
      "op": "JUMPDEST"
    },
    "3055": {
      "op": "DUP3"
    },
    "3056": {
      "op": "DUP1"
    },
    "3057": {
      "op": "SLOAD"
    },
    "3058": {
      "op": "DUP3"
    },
    "3059": {
      "op": "DUP3"
    },
    "3060": {
      "op": "SSTORE"
    },
    "3061": {
      "op": "SWAP1"
    },
    "3062": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3064": {
      "op": "MSTORE"
    },
    "3065": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3067": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3069": {
      "op": "KECCAK256"
    },
    "3070": {
      "op": "SWAP1"
    },
    "3071": {
      "op": "DUP2"
    },
    "3072": {
      "op": "ADD"
    },
    "3073": {
      "op": "SWAP3"
    },
    "3074": {
      "op": "DUP3"
    },
    "3075": {
      "op": "ISZERO"
    },
    "3076": {
      "op": "PUSH2",
      "value": "0xC2E"
    },
    "3079": {
      "op": "JUMPI"
    },
    "3080": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3082": {
      "op": "MSTORE"
    },
    "3083": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3085": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3087": {
      "op": "KECCAK256"
    },
    "3088": {
      "op": "SWAP2"
    },
    "3089": {
      "op": "DUP3"
    },
    "3090": {
      "op": "ADD"
    },
    "3091": {
      "op": "JUMPDEST"
    },
    "3092": {
      "op": "DUP3"
    },
    "3093": {
      "op": "DUP2"
    },
    "3094": {
      "op": "GT"
    },
    "3095": {
      "op": "ISZERO"
    },
    "3096": {
      "op": "PUSH2",
      "value": "0xC2E"
    },
    "3099": {
      "op": "JUMPI"
    },
    "3100": {
      "op": "DUP3"
    },
    "3101": {
      "op": "SLOAD"
    },
    "3102": {
      "op": "DUP3"
    },
    "3103": {
      "op": "SSTORE"
    },
    "3104": {
      "op": "SWAP2"
    },
    "3105": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3107": {
      "op": "ADD"
    },
    "3108": {
      "op": "SWAP2"
    },
    "3109": {
      "op": "SWAP1"
    },
    "3110": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3112": {
      "op": "ADD"
    },
    "3113": {
      "op": "SWAP1"
    },
    "3114": {
      "op": "PUSH2",
      "value": "0xC13"
    },
    "3117": {
      "op": "JUMP"
    },
    "3118": {
      "op": "JUMPDEST"
    },
    "3119": {
      "op": "POP"
    },
    "3120": {
      "op": "PUSH2",
      "value": "0xC3A"
    },
    "3123": {
      "op": "SWAP3"
    },
    "3124": {
      "op": "SWAP2"
    },
    "3125": {
      "op": "POP"
    },
    "3126": {
      "op": "PUSH2",
      "value": "0xCB2"
    },
    "3129": {
      "jump": "i",
      "op": "JUMP"
    },
    "3130": {
      "op": "JUMPDEST"
    },
    "3131": {
      "op": "POP"
    },
    "3132": {
      "op": "SWAP1"
    },
    "3133": {
      "jump": "o",
      "op": "JUMP"
    },
    "3134": {
      "op": "JUMPDEST"
    },
    "3135": {
      "op": "DUP3"
    },
    "3136": {
      "op": "DUP1"
    },
    "3137": {
      "op": "SLOAD"
    },
    "3138": {
      "op": "PUSH2",
      "value": "0xC4A"
    },
    "3141": {
      "op": "SWAP1"
    },
    "3142": {
      "op": "PUSH2",
      "value": "0x119F"
    },
    "3145": {
      "jump": "i",
      "op": "JUMP"
    },
    "3146": {
      "op": "JUMPDEST"
    },
    "3147": {
      "op": "SWAP1"
    },
    "3148": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3150": {
      "op": "MSTORE"
    },
    "3151": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3153": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3155": {
      "op": "KECCAK256"
    },
    "3156": {
      "op": "SWAP1"
    },
    "3157": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3159": {
      "op": "ADD"
    },
    "3160": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3162": {
      "op": "SWAP1"
    },
    "3163": {
      "op": "DIV"
    },
    "3164": {
      "op": "DUP2"
    },
    "3165": {
      "op": "ADD"
    },
    "3166": {
      "op": "SWAP3"
    },
    "3167": {
      "op": "DUP3"
    },
    "3168": {
      "op": "PUSH2",
      "value": "0xC6C"
    },
    "3171": {
      "op": "JUMPI"
    },
    "3172": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3174": {
      "op": "DUP6"
    },
    "3175": {
      "op": "SSTORE"
    },
    "3176": {
      "op": "PUSH2",
      "value": "0xC2E"
    },
    "3179": {
      "op": "JUMP"
    },
    "3180": {
      "op": "JUMPDEST"
    },
    "3181": {
      "op": "DUP3"
    },
    "3182": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3184": {
      "op": "LT"
    },
    "3185": {
      "op": "PUSH2",
      "value": "0xC85"
    },
    "3188": {
      "op": "JUMPI"
    },
    "3189": {
      "op": "DUP1"
    },
    "3190": {
      "op": "MLOAD"
    },
    "3191": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3193": {
      "op": "NOT"
    },
    "3194": {
      "op": "AND"
    },
    "3195": {
      "op": "DUP4"
    },
    "3196": {
      "op": "DUP1"
    },
    "3197": {
      "op": "ADD"
    },
    "3198": {
      "op": "OR"
    },
    "3199": {
      "op": "DUP6"
    },
    "3200": {
      "op": "SSTORE"
    },
    "3201": {
      "op": "PUSH2",
      "value": "0xC2E"
    },
    "3204": {
      "op": "JUMP"
    },
    "3205": {
      "op": "JUMPDEST"
    },
    "3206": {
      "op": "DUP3"
    },
    "3207": {
      "op": "DUP1"
    },
    "3208": {
      "op": "ADD"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3211": {
      "op": "ADD"
    },
    "3212": {
      "op": "DUP6"
    },
    "3213": {
      "op": "SSTORE"
    },
    "3214": {
      "op": "DUP3"
    },
    "3215": {
      "op": "ISZERO"
    },
    "3216": {
      "op": "PUSH2",
      "value": "0xC2E"
    },
    "3219": {
      "op": "JUMPI"
    },
    "3220": {
      "op": "SWAP2"
    },
    "3221": {
      "op": "DUP3"
    },
    "3222": {
      "op": "ADD"
    },
    "3223": {
      "op": "JUMPDEST"
    },
    "3224": {
      "op": "DUP3"
    },
    "3225": {
      "op": "DUP2"
    },
    "3226": {
      "op": "GT"
    },
    "3227": {
      "op": "ISZERO"
    },
    "3228": {
      "op": "PUSH2",
      "value": "0xC2E"
    },
    "3231": {
      "op": "JUMPI"
    },
    "3232": {
      "op": "DUP3"
    },
    "3233": {
      "op": "MLOAD"
    },
    "3234": {
      "op": "DUP3"
    },
    "3235": {
      "op": "SSTORE"
    },
    "3236": {
      "op": "SWAP2"
    },
    "3237": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3239": {
      "op": "ADD"
    },
    "3240": {
      "op": "SWAP2"
    },
    "3241": {
      "op": "SWAP1"
    },
    "3242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3244": {
      "op": "ADD"
    },
    "3245": {
      "op": "SWAP1"
    },
    "3246": {
      "op": "PUSH2",
      "value": "0xC97"
    },
    "3249": {
      "op": "JUMP"
    },
    "3250": {
      "op": "JUMPDEST"
    },
    "3251": {
      "op": "JUMPDEST"
    },
    "3252": {
      "op": "DUP1"
    },
    "3253": {
      "op": "DUP3"
    },
    "3254": {
      "op": "GT"
    },
    "3255": {
      "op": "ISZERO"
    },
    "3256": {
      "op": "PUSH2",
      "value": "0xC3A"
    },
    "3259": {
      "op": "JUMPI"
    },
    "3260": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3262": {
      "op": "DUP2"
    },
    "3263": {
      "op": "SSTORE"
    },
    "3264": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3266": {
      "op": "ADD"
    },
    "3267": {
      "op": "PUSH2",
      "value": "0xCB3"
    },
    "3270": {
      "op": "JUMP"
    },
    "3271": {
      "op": "JUMPDEST"
    },
    "3272": {
      "op": "DUP1"
    },
    "3273": {
      "op": "CALLDATALOAD"
    },
    "3274": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3278": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3280": {
      "op": "SHL"
    },
    "3281": {
      "op": "SUB"
    },
    "3282": {
      "op": "DUP2"
    },
    "3283": {
      "op": "AND"
    },
    "3284": {
      "op": "DUP2"
    },
    "3285": {
      "op": "EQ"
    },
    "3286": {
      "op": "PUSH2",
      "value": "0xCDE"
    },
    "3289": {
      "op": "JUMPI"
    },
    "3290": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3292": {
      "op": "DUP1"
    },
    "3293": {
      "op": "REVERT"
    },
    "3294": {
      "op": "JUMPDEST"
    },
    "3295": {
      "op": "SWAP2"
    },
    "3296": {
      "op": "SWAP1"
    },
    "3297": {
      "op": "POP"
    },
    "3298": {
      "jump": "o",
      "op": "JUMP"
    },
    "3299": {
      "op": "JUMPDEST"
    },
    "3300": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3302": {
      "op": "DUP2"
    },
    "3303": {
      "op": "LT"
    },
    "3304": {
      "op": "PUSH2",
      "value": "0x411"
    },
    "3307": {
      "op": "JUMPI"
    },
    "3308": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3310": {
      "op": "DUP1"
    },
    "3311": {
      "op": "REVERT"
    },
    "3312": {
      "op": "JUMPDEST"
    },
    "3313": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3315": {
      "op": "DUP1"
    },
    "3316": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3318": {
      "op": "DUP4"
    },
    "3319": {
      "op": "DUP6"
    },
    "3320": {
      "op": "SUB"
    },
    "3321": {
      "op": "SLT"
    },
    "3322": {
      "op": "ISZERO"
    },
    "3323": {
      "op": "PUSH2",
      "value": "0xD03"
    },
    "3326": {
      "op": "JUMPI"
    },
    "3327": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3329": {
      "op": "DUP1"
    },
    "3330": {
      "op": "REVERT"
    },
    "3331": {
      "op": "JUMPDEST"
    },
    "3332": {
      "op": "PUSH2",
      "value": "0xD0C"
    },
    "3335": {
      "op": "DUP4"
    },
    "3336": {
      "op": "PUSH2",
      "value": "0xCC7"
    },
    "3339": {
      "jump": "i",
      "op": "JUMP"
    },
    "3340": {
      "op": "JUMPDEST"
    },
    "3341": {
      "op": "SWAP2"
    },
    "3342": {
      "op": "POP"
    },
    "3343": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3345": {
      "op": "DUP4"
    },
    "3346": {
      "op": "ADD"
    },
    "3347": {
      "op": "CALLDATALOAD"
    },
    "3348": {
      "op": "PUSH2",
      "value": "0xD1C"
    },
    "3351": {
      "op": "DUP2"
    },
    "3352": {
      "op": "PUSH2",
      "value": "0xCE3"
    },
    "3355": {
      "jump": "i",
      "op": "JUMP"
    },
    "3356": {
      "op": "JUMPDEST"
    },
    "3357": {
      "op": "DUP1"
    },
    "3358": {
      "op": "SWAP2"
    },
    "3359": {
      "op": "POP"
    },
    "3360": {
      "op": "POP"
    },
    "3361": {
      "op": "SWAP3"
    },
    "3362": {
      "op": "POP"
    },
    "3363": {
      "op": "SWAP3"
    },
    "3364": {
      "op": "SWAP1"
    },
    "3365": {
      "op": "POP"
    },
    "3366": {
      "jump": "o",
      "op": "JUMP"
    },
    "3367": {
      "op": "JUMPDEST"
    },
    "3368": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3373": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3375": {
      "op": "SHL"
    },
    "3376": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3378": {
      "op": "MSTORE"
    },
    "3379": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3381": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3383": {
      "op": "MSTORE"
    },
    "3384": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3388": {
      "op": "REVERT"
    },
    "3389": {
      "op": "JUMPDEST"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3392": {
      "op": "MLOAD"
    },
    "3393": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3395": {
      "op": "DUP3"
    },
    "3396": {
      "op": "ADD"
    },
    "3397": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3399": {
      "op": "NOT"
    },
    "3400": {
      "op": "AND"
    },
    "3401": {
      "op": "DUP2"
    },
    "3402": {
      "op": "ADD"
    },
    "3403": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3412": {
      "op": "DUP2"
    },
    "3413": {
      "op": "GT"
    },
    "3414": {
      "op": "DUP3"
    },
    "3415": {
      "op": "DUP3"
    },
    "3416": {
      "op": "LT"
    },
    "3417": {
      "op": "OR"
    },
    "3418": {
      "op": "ISZERO"
    },
    "3419": {
      "op": "PUSH2",
      "value": "0xD66"
    },
    "3422": {
      "op": "JUMPI"
    },
    "3423": {
      "op": "PUSH2",
      "value": "0xD66"
    },
    "3426": {
      "op": "PUSH2",
      "value": "0xD27"
    },
    "3429": {
      "jump": "i",
      "op": "JUMP"
    },
    "3430": {
      "op": "JUMPDEST"
    },
    "3431": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3433": {
      "op": "MSTORE"
    },
    "3434": {
      "op": "SWAP2"
    },
    "3435": {
      "op": "SWAP1"
    },
    "3436": {
      "op": "POP"
    },
    "3437": {
      "jump": "o",
      "op": "JUMP"
    },
    "3438": {
      "op": "JUMPDEST"
    },
    "3439": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3441": {
      "op": "DUP3"
    },
    "3442": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3444": {
      "op": "DUP4"
    },
    "3445": {
      "op": "ADD"
    },
    "3446": {
      "op": "SLT"
    },
    "3447": {
      "op": "PUSH2",
      "value": "0xD7F"
    },
    "3450": {
      "op": "JUMPI"
    },
    "3451": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3453": {
      "op": "DUP1"
    },
    "3454": {
      "op": "REVERT"
    },
    "3455": {
      "op": "JUMPDEST"
    },
    "3456": {
      "op": "DUP2"
    },
    "3457": {
      "op": "CALLDATALOAD"
    },
    "3458": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3467": {
      "op": "DUP2"
    },
    "3468": {
      "op": "GT"
    },
    "3469": {
      "op": "ISZERO"
    },
    "3470": {
      "op": "PUSH2",
      "value": "0xD99"
    },
    "3473": {
      "op": "JUMPI"
    },
    "3474": {
      "op": "PUSH2",
      "value": "0xD99"
    },
    "3477": {
      "op": "PUSH2",
      "value": "0xD27"
    },
    "3480": {
      "jump": "i",
      "op": "JUMP"
    },
    "3481": {
      "op": "JUMPDEST"
    },
    "3482": {
      "op": "PUSH2",
      "value": "0xDAC"
    },
    "3485": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3487": {
      "op": "DUP3"
    },
    "3488": {
      "op": "ADD"
    },
    "3489": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3491": {
      "op": "NOT"
    },
    "3492": {
      "op": "AND"
    },
    "3493": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3495": {
      "op": "ADD"
    },
    "3496": {
      "op": "PUSH2",
      "value": "0xD3D"
    },
    "3499": {
      "jump": "i",
      "op": "JUMP"
    },
    "3500": {
      "op": "JUMPDEST"
    },
    "3501": {
      "op": "DUP2"
    },
    "3502": {
      "op": "DUP2"
    },
    "3503": {
      "op": "MSTORE"
    },
    "3504": {
      "op": "DUP5"
    },
    "3505": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3507": {
      "op": "DUP4"
    },
    "3508": {
      "op": "DUP7"
    },
    "3509": {
      "op": "ADD"
    },
    "3510": {
      "op": "ADD"
    },
    "3511": {
      "op": "GT"
    },
    "3512": {
      "op": "ISZERO"
    },
    "3513": {
      "op": "PUSH2",
      "value": "0xDC1"
    },
    "3516": {
      "op": "JUMPI"
    },
    "3517": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3519": {
      "op": "DUP1"
    },
    "3520": {
      "op": "REVERT"
    },
    "3521": {
      "op": "JUMPDEST"
    },
    "3522": {
      "op": "DUP2"
    },
    "3523": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3525": {
      "op": "DUP6"
    },
    "3526": {
      "op": "ADD"
    },
    "3527": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3529": {
      "op": "DUP4"
    },
    "3530": {
      "op": "ADD"
    },
    "3531": {
      "op": "CALLDATACOPY"
    },
    "3532": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3534": {
      "op": "SWAP2"
    },
    "3535": {
      "op": "DUP2"
    },
    "3536": {
      "op": "ADD"
    },
    "3537": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3539": {
      "op": "ADD"
    },
    "3540": {
      "op": "SWAP2"
    },
    "3541": {
      "op": "SWAP1"
    },
    "3542": {
      "op": "SWAP2"
    },
    "3543": {
      "op": "MSTORE"
    },
    "3544": {
      "op": "SWAP4"
    },
    "3545": {
      "op": "SWAP3"
    },
    "3546": {
      "op": "POP"
    },
    "3547": {
      "op": "POP"
    },
    "3548": {
      "op": "POP"
    },
    "3549": {
      "jump": "o",
      "op": "JUMP"
    },
    "3550": {
      "op": "JUMPDEST"
    },
    "3551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3553": {
      "op": "DUP1"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3556": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3558": {
      "op": "DUP5"
    },
    "3559": {
      "op": "DUP7"
    },
    "3560": {
      "op": "SUB"
    },
    "3561": {
      "op": "SLT"
    },
    "3562": {
      "op": "ISZERO"
    },
    "3563": {
      "op": "PUSH2",
      "value": "0xDF3"
    },
    "3566": {
      "op": "JUMPI"
    },
    "3567": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3569": {
      "op": "DUP1"
    },
    "3570": {
      "op": "REVERT"
    },
    "3571": {
      "op": "JUMPDEST"
    },
    "3572": {
      "op": "DUP4"
    },
    "3573": {
      "op": "CALLDATALOAD"
    },
    "3574": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3583": {
      "op": "DUP2"
    },
    "3584": {
      "op": "GT"
    },
    "3585": {
      "op": "ISZERO"
    },
    "3586": {
      "op": "PUSH2",
      "value": "0xE0A"
    },
    "3589": {
      "op": "JUMPI"
    },
    "3590": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3592": {
      "op": "DUP1"
    },
    "3593": {
      "op": "REVERT"
    },
    "3594": {
      "op": "JUMPDEST"
    },
    "3595": {
      "op": "PUSH2",
      "value": "0xE16"
    },
    "3598": {
      "op": "DUP7"
    },
    "3599": {
      "op": "DUP3"
    },
    "3600": {
      "op": "DUP8"
    },
    "3601": {
      "op": "ADD"
    },
    "3602": {
      "op": "PUSH2",
      "value": "0xD6E"
    },
    "3605": {
      "jump": "i",
      "op": "JUMP"
    },
    "3606": {
      "op": "JUMPDEST"
    },
    "3607": {
      "op": "SWAP4"
    },
    "3608": {
      "op": "POP"
    },
    "3609": {
      "op": "POP"
    },
    "3610": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3612": {
      "op": "DUP5"
    },
    "3613": {
      "op": "ADD"
    },
    "3614": {
      "op": "CALLDATALOAD"
    },
    "3615": {
      "op": "PUSH2",
      "value": "0xE27"
    },
    "3618": {
      "op": "DUP2"
    },
    "3619": {
      "op": "PUSH2",
      "value": "0xCE3"
    },
    "3622": {
      "jump": "i",
      "op": "JUMP"
    },
    "3623": {
      "op": "JUMPDEST"
    },
    "3624": {
      "op": "SWAP2"
    },
    "3625": {
      "op": "POP"
    },
    "3626": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3628": {
      "op": "DUP5"
    },
    "3629": {
      "op": "ADD"
    },
    "3630": {
      "op": "CALLDATALOAD"
    },
    "3631": {
      "op": "PUSH2",
      "value": "0xE37"
    },
    "3634": {
      "op": "DUP2"
    },
    "3635": {
      "op": "PUSH2",
      "value": "0xCE3"
    },
    "3638": {
      "jump": "i",
      "op": "JUMP"
    },
    "3639": {
      "op": "JUMPDEST"
    },
    "3640": {
      "op": "DUP1"
    },
    "3641": {
      "op": "SWAP2"
    },
    "3642": {
      "op": "POP"
    },
    "3643": {
      "op": "POP"
    },
    "3644": {
      "op": "SWAP3"
    },
    "3645": {
      "op": "POP"
    },
    "3646": {
      "op": "SWAP3"
    },
    "3647": {
      "op": "POP"
    },
    "3648": {
      "op": "SWAP3"
    },
    "3649": {
      "jump": "o",
      "op": "JUMP"
    },
    "3650": {
      "op": "JUMPDEST"
    },
    "3651": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3653": {
      "op": "DUP1"
    },
    "3654": {
      "op": "DUP3"
    },
    "3655": {
      "op": "MSTORE"
    },
    "3656": {
      "op": "DUP3"
    },
    "3657": {
      "op": "MLOAD"
    },
    "3658": {
      "op": "DUP3"
    },
    "3659": {
      "op": "DUP3"
    },
    "3660": {
      "op": "ADD"
    },
    "3661": {
      "op": "DUP2"
    },
    "3662": {
      "op": "SWAP1"
    },
    "3663": {
      "op": "MSTORE"
    },
    "3664": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3666": {
      "op": "SWAP2"
    },
    "3667": {
      "op": "SWAP1"
    },
    "3668": {
      "op": "DUP5"
    },
    "3669": {
      "op": "DUP3"
    },
    "3670": {
      "op": "ADD"
    },
    "3671": {
      "op": "SWAP1"
    },
    "3672": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3674": {
      "op": "DUP6"
    },
    "3675": {
      "op": "ADD"
    },
    "3676": {
      "op": "SWAP1"
    },
    "3677": {
      "op": "DUP5"
    },
    "3678": {
      "op": "JUMPDEST"
    },
    "3679": {
      "op": "DUP2"
    },
    "3680": {
      "op": "DUP2"
    },
    "3681": {
      "op": "LT"
    },
    "3682": {
      "op": "ISZERO"
    },
    "3683": {
      "op": "PUSH2",
      "value": "0xE83"
    },
    "3686": {
      "op": "JUMPI"
    },
    "3687": {
      "op": "DUP4"
    },
    "3688": {
      "op": "MLOAD"
    },
    "3689": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3693": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3695": {
      "op": "SHL"
    },
    "3696": {
      "op": "SUB"
    },
    "3697": {
      "op": "AND"
    },
    "3698": {
      "op": "DUP4"
    },
    "3699": {
      "op": "MSTORE"
    },
    "3700": {
      "op": "SWAP3"
    },
    "3701": {
      "op": "DUP5"
    },
    "3702": {
      "op": "ADD"
    },
    "3703": {
      "op": "SWAP3"
    },
    "3704": {
      "op": "SWAP2"
    },
    "3705": {
      "op": "DUP5"
    },
    "3706": {
      "op": "ADD"
    },
    "3707": {
      "op": "SWAP2"
    },
    "3708": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3710": {
      "op": "ADD"
    },
    "3711": {
      "op": "PUSH2",
      "value": "0xE5E"
    },
    "3714": {
      "op": "JUMP"
    },
    "3715": {
      "op": "JUMPDEST"
    },
    "3716": {
      "op": "POP"
    },
    "3717": {
      "op": "SWAP1"
    },
    "3718": {
      "op": "SWAP7"
    },
    "3719": {
      "op": "SWAP6"
    },
    "3720": {
      "op": "POP"
    },
    "3721": {
      "op": "POP"
    },
    "3722": {
      "op": "POP"
    },
    "3723": {
      "op": "POP"
    },
    "3724": {
      "op": "POP"
    },
    "3725": {
      "op": "POP"
    },
    "3726": {
      "jump": "o",
      "op": "JUMP"
    },
    "3727": {
      "op": "JUMPDEST"
    },
    "3728": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3730": {
      "op": "DUP1"
    },
    "3731": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3733": {
      "op": "DUP4"
    },
    "3734": {
      "op": "DUP6"
    },
    "3735": {
      "op": "SUB"
    },
    "3736": {
      "op": "SLT"
    },
    "3737": {
      "op": "ISZERO"
    },
    "3738": {
      "op": "PUSH2",
      "value": "0xEA2"
    },
    "3741": {
      "op": "JUMPI"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3744": {
      "op": "DUP1"
    },
    "3745": {
      "op": "REVERT"
    },
    "3746": {
      "op": "JUMPDEST"
    },
    "3747": {
      "op": "DUP3"
    },
    "3748": {
      "op": "CALLDATALOAD"
    },
    "3749": {
      "op": "PUSH2",
      "value": "0xEAD"
    },
    "3752": {
      "op": "DUP2"
    },
    "3753": {
      "op": "PUSH2",
      "value": "0xCE3"
    },
    "3756": {
      "jump": "i",
      "op": "JUMP"
    },
    "3757": {
      "op": "JUMPDEST"
    },
    "3758": {
      "op": "SWAP5"
    },
    "3759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3761": {
      "op": "SWAP4"
    },
    "3762": {
      "op": "SWAP1"
    },
    "3763": {
      "op": "SWAP4"
    },
    "3764": {
      "op": "ADD"
    },
    "3765": {
      "op": "CALLDATALOAD"
    },
    "3766": {
      "op": "SWAP4"
    },
    "3767": {
      "op": "POP"
    },
    "3768": {
      "op": "POP"
    },
    "3769": {
      "op": "POP"
    },
    "3770": {
      "jump": "o",
      "op": "JUMP"
    },
    "3771": {
      "op": "JUMPDEST"
    },
    "3772": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3774": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3776": {
      "op": "DUP3"
    },
    "3777": {
      "op": "DUP5"
    },
    "3778": {
      "op": "SUB"
    },
    "3779": {
      "op": "SLT"
    },
    "3780": {
      "op": "ISZERO"
    },
    "3781": {
      "op": "PUSH2",
      "value": "0xECD"
    },
    "3784": {
      "op": "JUMPI"
    },
    "3785": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3787": {
      "op": "DUP1"
    },
    "3788": {
      "op": "REVERT"
    },
    "3789": {
      "op": "JUMPDEST"
    },
    "3790": {
      "op": "DUP2"
    },
    "3791": {
      "op": "CALLDATALOAD"
    },
    "3792": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3801": {
      "op": "DUP2"
    },
    "3802": {
      "op": "GT"
    },
    "3803": {
      "op": "ISZERO"
    },
    "3804": {
      "op": "PUSH2",
      "value": "0xEE4"
    },
    "3807": {
      "op": "JUMPI"
    },
    "3808": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3810": {
      "op": "DUP1"
    },
    "3811": {
      "op": "REVERT"
    },
    "3812": {
      "op": "JUMPDEST"
    },
    "3813": {
      "op": "PUSH2",
      "value": "0xEF0"
    },
    "3816": {
      "op": "DUP5"
    },
    "3817": {
      "op": "DUP3"
    },
    "3818": {
      "op": "DUP6"
    },
    "3819": {
      "op": "ADD"
    },
    "3820": {
      "op": "PUSH2",
      "value": "0xD6E"
    },
    "3823": {
      "jump": "i",
      "op": "JUMP"
    },
    "3824": {
      "op": "JUMPDEST"
    },
    "3825": {
      "op": "SWAP5"
    },
    "3826": {
      "op": "SWAP4"
    },
    "3827": {
      "op": "POP"
    },
    "3828": {
      "op": "POP"
    },
    "3829": {
      "op": "POP"
    },
    "3830": {
      "op": "POP"
    },
    "3831": {
      "jump": "o",
      "op": "JUMP"
    },
    "3832": {
      "op": "JUMPDEST"
    },
    "3833": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3838": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3840": {
      "op": "SHL"
    },
    "3841": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3843": {
      "op": "MSTORE"
    },
    "3844": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "3846": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3848": {
      "op": "MSTORE"
    },
    "3849": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3851": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3853": {
      "op": "REVERT"
    },
    "3854": {
      "op": "JUMPDEST"
    },
    "3855": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3857": {
      "op": "DUP2"
    },
    "3858": {
      "op": "LT"
    },
    "3859": {
      "op": "PUSH2",
      "value": "0x411"
    },
    "3862": {
      "op": "JUMPI"
    },
    "3863": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3868": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3870": {
      "op": "SHL"
    },
    "3871": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3873": {
      "op": "MSTORE"
    },
    "3874": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "3876": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3878": {
      "op": "MSTORE"
    },
    "3879": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3881": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3883": {
      "op": "REVERT"
    },
    "3884": {
      "op": "JUMPDEST"
    },
    "3885": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3887": {
      "op": "DUP2"
    },
    "3888": {
      "op": "ADD"
    },
    "3889": {
      "op": "PUSH2",
      "value": "0xF39"
    },
    "3892": {
      "op": "DUP4"
    },
    "3893": {
      "op": "PUSH2",
      "value": "0xF0E"
    },
    "3896": {
      "jump": "i",
      "op": "JUMP"
    },
    "3897": {
      "op": "JUMPDEST"
    },
    "3898": {
      "op": "SWAP2"
    },
    "3899": {
      "op": "SWAP1"
    },
    "3900": {
      "op": "MSTORE"
    },
    "3901": {
      "op": "SWAP1"
    },
    "3902": {
      "jump": "o",
      "op": "JUMP"
    },
    "3903": {
      "op": "JUMPDEST"
    },
    "3904": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3906": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3908": {
      "op": "DUP3"
    },
    "3909": {
      "op": "DUP5"
    },
    "3910": {
      "op": "SUB"
    },
    "3911": {
      "op": "SLT"
    },
    "3912": {
      "op": "ISZERO"
    },
    "3913": {
      "op": "PUSH2",
      "value": "0xF51"
    },
    "3916": {
      "op": "JUMPI"
    },
    "3917": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3919": {
      "op": "DUP1"
    },
    "3920": {
      "op": "REVERT"
    },
    "3921": {
      "op": "JUMPDEST"
    },
    "3922": {
      "op": "POP"
    },
    "3923": {
      "op": "CALLDATALOAD"
    },
    "3924": {
      "op": "SWAP2"
    },
    "3925": {
      "op": "SWAP1"
    },
    "3926": {
      "op": "POP"
    },
    "3927": {
      "jump": "o",
      "op": "JUMP"
    },
    "3928": {
      "op": "JUMPDEST"
    },
    "3929": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3931": {
      "op": "JUMPDEST"
    },
    "3932": {
      "op": "DUP4"
    },
    "3933": {
      "op": "DUP2"
    },
    "3934": {
      "op": "LT"
    },
    "3935": {
      "op": "ISZERO"
    },
    "3936": {
      "op": "PUSH2",
      "value": "0xF73"
    },
    "3939": {
      "op": "JUMPI"
    },
    "3940": {
      "op": "DUP2"
    },
    "3941": {
      "op": "DUP2"
    },
    "3942": {
      "op": "ADD"
    },
    "3943": {
      "op": "MLOAD"
    },
    "3944": {
      "op": "DUP4"
    },
    "3945": {
      "op": "DUP3"
    },
    "3946": {
      "op": "ADD"
    },
    "3947": {
      "op": "MSTORE"
    },
    "3948": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3950": {
      "op": "ADD"
    },
    "3951": {
      "op": "PUSH2",
      "value": "0xF5B"
    },
    "3954": {
      "op": "JUMP"
    },
    "3955": {
      "op": "JUMPDEST"
    },
    "3956": {
      "op": "DUP4"
    },
    "3957": {
      "op": "DUP2"
    },
    "3958": {
      "op": "GT"
    },
    "3959": {
      "op": "ISZERO"
    },
    "3960": {
      "op": "PUSH2",
      "value": "0xAD4"
    },
    "3963": {
      "op": "JUMPI"
    },
    "3964": {
      "op": "POP"
    },
    "3965": {
      "op": "POP"
    },
    "3966": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3968": {
      "op": "SWAP2"
    },
    "3969": {
      "op": "ADD"
    },
    "3970": {
      "op": "MSTORE"
    },
    "3971": {
      "jump": "o",
      "op": "JUMP"
    },
    "3972": {
      "op": "JUMPDEST"
    },
    "3973": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3975": {
      "op": "DUP2"
    },
    "3976": {
      "op": "MSTORE"
    },
    "3977": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3979": {
      "op": "DUP5"
    },
    "3980": {
      "op": "MLOAD"
    },
    "3981": {
      "op": "DUP1"
    },
    "3982": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3984": {
      "op": "DUP5"
    },
    "3985": {
      "op": "ADD"
    },
    "3986": {
      "op": "MSTORE"
    },
    "3987": {
      "op": "PUSH2",
      "value": "0xFA3"
    },
    "3990": {
      "op": "DUP2"
    },
    "3991": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3993": {
      "op": "DUP6"
    },
    "3994": {
      "op": "ADD"
    },
    "3995": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3997": {
      "op": "DUP10"
    },
    "3998": {
      "op": "ADD"
    },
    "3999": {
      "op": "PUSH2",
      "value": "0xF58"
    },
    "4002": {
      "jump": "i",
      "op": "JUMP"
    },
    "4003": {
      "op": "JUMPDEST"
    },
    "4004": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4006": {
      "op": "ADD"
    },
    "4007": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4009": {
      "op": "NOT"
    },
    "4010": {
      "op": "AND"
    },
    "4011": {
      "op": "DUP3"
    },
    "4012": {
      "op": "ADD"
    },
    "4013": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4015": {
      "op": "ADD"
    },
    "4016": {
      "op": "SWAP1"
    },
    "4017": {
      "op": "POP"
    },
    "4018": {
      "op": "PUSH2",
      "value": "0xFBA"
    },
    "4021": {
      "op": "DUP5"
    },
    "4022": {
      "op": "PUSH2",
      "value": "0xF0E"
    },
    "4025": {
      "jump": "i",
      "op": "JUMP"
    },
    "4026": {
      "op": "JUMPDEST"
    },
    "4027": {
      "op": "DUP4"
    },
    "4028": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4030": {
      "op": "DUP4"
    },
    "4031": {
      "op": "ADD"
    },
    "4032": {
      "op": "MSTORE"
    },
    "4033": {
      "op": "PUSH2",
      "value": "0xFC9"
    },
    "4036": {
      "op": "DUP4"
    },
    "4037": {
      "op": "PUSH2",
      "value": "0xF0E"
    },
    "4040": {
      "jump": "i",
      "op": "JUMP"
    },
    "4041": {
      "op": "JUMPDEST"
    },
    "4042": {
      "op": "DUP3"
    },
    "4043": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4045": {
      "op": "DUP4"
    },
    "4046": {
      "op": "ADD"
    },
    "4047": {
      "op": "MSTORE"
    },
    "4048": {
      "op": "SWAP5"
    },
    "4049": {
      "op": "SWAP4"
    },
    "4050": {
      "op": "POP"
    },
    "4051": {
      "op": "POP"
    },
    "4052": {
      "op": "POP"
    },
    "4053": {
      "op": "POP"
    },
    "4054": {
      "jump": "o",
      "op": "JUMP"
    },
    "4055": {
      "op": "JUMPDEST"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4058": {
      "op": "DUP1"
    },
    "4059": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4061": {
      "op": "DUP4"
    },
    "4062": {
      "op": "DUP6"
    },
    "4063": {
      "op": "SUB"
    },
    "4064": {
      "op": "SLT"
    },
    "4065": {
      "op": "ISZERO"
    },
    "4066": {
      "op": "PUSH2",
      "value": "0xFEA"
    },
    "4069": {
      "op": "JUMPI"
    },
    "4070": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4072": {
      "op": "DUP1"
    },
    "4073": {
      "op": "REVERT"
    },
    "4074": {
      "op": "JUMPDEST"
    },
    "4075": {
      "op": "DUP3"
    },
    "4076": {
      "op": "CALLDATALOAD"
    },
    "4077": {
      "op": "PUSH2",
      "value": "0xD0C"
    },
    "4080": {
      "op": "DUP2"
    },
    "4081": {
      "op": "PUSH2",
      "value": "0xCE3"
    },
    "4084": {
      "jump": "i",
      "op": "JUMP"
    },
    "4085": {
      "op": "JUMPDEST"
    },
    "4086": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4088": {
      "op": "DUP3"
    },
    "4089": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4091": {
      "op": "DUP4"
    },
    "4092": {
      "op": "ADD"
    },
    "4093": {
      "op": "SLT"
    },
    "4094": {
      "op": "PUSH2",
      "value": "0x1006"
    },
    "4097": {
      "op": "JUMPI"
    },
    "4098": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4100": {
      "op": "DUP1"
    },
    "4101": {
      "op": "REVERT"
    },
    "4102": {
      "op": "JUMPDEST"
    },
    "4103": {
      "op": "DUP2"
    },
    "4104": {
      "op": "CALLDATALOAD"
    },
    "4105": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4107": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4116": {
      "op": "DUP3"
    },
    "4117": {
      "op": "GT"
    },
    "4118": {
      "op": "ISZERO"
    },
    "4119": {
      "op": "PUSH2",
      "value": "0x1022"
    },
    "4122": {
      "op": "JUMPI"
    },
    "4123": {
      "op": "PUSH2",
      "value": "0x1022"
    },
    "4126": {
      "op": "PUSH2",
      "value": "0xD27"
    },
    "4129": {
      "jump": "i",
      "op": "JUMP"
    },
    "4130": {
      "op": "JUMPDEST"
    },
    "4131": {
      "op": "DUP2"
    },
    "4132": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "4134": {
      "op": "SHL"
    },
    "4135": {
      "op": "PUSH2",
      "value": "0x1031"
    },
    "4138": {
      "op": "DUP3"
    },
    "4139": {
      "op": "DUP3"
    },
    "4140": {
      "op": "ADD"
    },
    "4141": {
      "op": "PUSH2",
      "value": "0xD3D"
    },
    "4144": {
      "jump": "i",
      "op": "JUMP"
    },
    "4145": {
      "op": "JUMPDEST"
    },
    "4146": {
      "op": "SWAP3"
    },
    "4147": {
      "op": "DUP4"
    },
    "4148": {
      "op": "MSTORE"
    },
    "4149": {
      "op": "DUP5"
    },
    "4150": {
      "op": "DUP2"
    },
    "4151": {
      "op": "ADD"
    },
    "4152": {
      "op": "DUP3"
    },
    "4153": {
      "op": "ADD"
    },
    "4154": {
      "op": "SWAP3"
    },
    "4155": {
      "op": "DUP3"
    },
    "4156": {
      "op": "DUP2"
    },
    "4157": {
      "op": "ADD"
    },
    "4158": {
      "op": "SWAP1"
    },
    "4159": {
      "op": "DUP8"
    },
    "4160": {
      "op": "DUP6"
    },
    "4161": {
      "op": "GT"
    },
    "4162": {
      "op": "ISZERO"
    },
    "4163": {
      "op": "PUSH2",
      "value": "0x104B"
    },
    "4166": {
      "op": "JUMPI"
    },
    "4167": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4169": {
      "op": "DUP1"
    },
    "4170": {
      "op": "REVERT"
    },
    "4171": {
      "op": "JUMPDEST"
    },
    "4172": {
      "op": "DUP4"
    },
    "4173": {
      "op": "DUP8"
    },
    "4174": {
      "op": "ADD"
    },
    "4175": {
      "op": "SWAP3"
    },
    "4176": {
      "op": "POP"
    },
    "4177": {
      "op": "JUMPDEST"
    },
    "4178": {
      "op": "DUP5"
    },
    "4179": {
      "op": "DUP4"
    },
    "4180": {
      "op": "LT"
    },
    "4181": {
      "op": "ISZERO"
    },
    "4182": {
      "op": "PUSH2",
      "value": "0x1071"
    },
    "4185": {
      "op": "JUMPI"
    },
    "4186": {
      "op": "PUSH2",
      "value": "0x1062"
    },
    "4189": {
      "op": "DUP4"
    },
    "4190": {
      "op": "PUSH2",
      "value": "0xCC7"
    },
    "4193": {
      "jump": "i",
      "op": "JUMP"
    },
    "4194": {
      "op": "JUMPDEST"
    },
    "4195": {
      "op": "DUP3"
    },
    "4196": {
      "op": "MSTORE"
    },
    "4197": {
      "op": "SWAP2"
    },
    "4198": {
      "op": "DUP4"
    },
    "4199": {
      "op": "ADD"
    },
    "4200": {
      "op": "SWAP2"
    },
    "4201": {
      "op": "SWAP1"
    },
    "4202": {
      "op": "DUP4"
    },
    "4203": {
      "op": "ADD"
    },
    "4204": {
      "op": "SWAP1"
    },
    "4205": {
      "op": "PUSH2",
      "value": "0x1051"
    },
    "4208": {
      "op": "JUMP"
    },
    "4209": {
      "op": "JUMPDEST"
    },
    "4210": {
      "op": "SWAP8"
    },
    "4211": {
      "op": "SWAP7"
    },
    "4212": {
      "op": "POP"
    },
    "4213": {
      "op": "POP"
    },
    "4214": {
      "op": "POP"
    },
    "4215": {
      "op": "POP"
    },
    "4216": {
      "op": "POP"
    },
    "4217": {
      "op": "POP"
    },
    "4218": {
      "op": "POP"
    },
    "4219": {
      "jump": "o",
      "op": "JUMP"
    },
    "4220": {
      "op": "JUMPDEST"
    },
    "4221": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4223": {
      "op": "DUP1"
    },
    "4224": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4226": {
      "op": "DUP1"
    },
    "4227": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4229": {
      "op": "DUP6"
    },
    "4230": {
      "op": "DUP8"
    },
    "4231": {
      "op": "SUB"
    },
    "4232": {
      "op": "SLT"
    },
    "4233": {
      "op": "ISZERO"
    },
    "4234": {
      "op": "PUSH2",
      "value": "0x1092"
    },
    "4237": {
      "op": "JUMPI"
    },
    "4238": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4240": {
      "op": "DUP1"
    },
    "4241": {
      "op": "REVERT"
    },
    "4242": {
      "op": "JUMPDEST"
    },
    "4243": {
      "op": "DUP5"
    },
    "4244": {
      "op": "CALLDATALOAD"
    },
    "4245": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4254": {
      "op": "DUP1"
    },
    "4255": {
      "op": "DUP3"
    },
    "4256": {
      "op": "GT"
    },
    "4257": {
      "op": "ISZERO"
    },
    "4258": {
      "op": "PUSH2",
      "value": "0x10AA"
    },
    "4261": {
      "op": "JUMPI"
    },
    "4262": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4264": {
      "op": "DUP1"
    },
    "4265": {
      "op": "REVERT"
    },
    "4266": {
      "op": "JUMPDEST"
    },
    "4267": {
      "op": "PUSH2",
      "value": "0x10B6"
    },
    "4270": {
      "op": "DUP9"
    },
    "4271": {
      "op": "DUP4"
    },
    "4272": {
      "op": "DUP10"
    },
    "4273": {
      "op": "ADD"
    },
    "4274": {
      "op": "PUSH2",
      "value": "0xFF5"
    },
    "4277": {
      "jump": "i",
      "op": "JUMP"
    },
    "4278": {
      "op": "JUMPDEST"
    },
    "4279": {
      "op": "SWAP6"
    },
    "4280": {
      "op": "POP"
    },
    "4281": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4283": {
      "op": "DUP8"
    },
    "4284": {
      "op": "ADD"
    },
    "4285": {
      "op": "CALLDATALOAD"
    },
    "4286": {
      "op": "SWAP2"
    },
    "4287": {
      "op": "POP"
    },
    "4288": {
      "op": "DUP1"
    },
    "4289": {
      "op": "DUP3"
    },
    "4290": {
      "op": "GT"
    },
    "4291": {
      "op": "ISZERO"
    },
    "4292": {
      "op": "PUSH2",
      "value": "0x10CC"
    },
    "4295": {
      "op": "JUMPI"
    },
    "4296": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4298": {
      "op": "DUP1"
    },
    "4299": {
      "op": "REVERT"
    },
    "4300": {
      "op": "JUMPDEST"
    },
    "4301": {
      "op": "PUSH2",
      "value": "0x10D8"
    },
    "4304": {
      "op": "DUP9"
    },
    "4305": {
      "op": "DUP4"
    },
    "4306": {
      "op": "DUP10"
    },
    "4307": {
      "op": "ADD"
    },
    "4308": {
      "op": "PUSH2",
      "value": "0xFF5"
    },
    "4311": {
      "jump": "i",
      "op": "JUMP"
    },
    "4312": {
      "op": "JUMPDEST"
    },
    "4313": {
      "op": "SWAP5"
    },
    "4314": {
      "op": "POP"
    },
    "4315": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4317": {
      "op": "DUP8"
    },
    "4318": {
      "op": "ADD"
    },
    "4319": {
      "op": "CALLDATALOAD"
    },
    "4320": {
      "op": "SWAP2"
    },
    "4321": {
      "op": "POP"
    },
    "4322": {
      "op": "DUP1"
    },
    "4323": {
      "op": "DUP3"
    },
    "4324": {
      "op": "GT"
    },
    "4325": {
      "op": "ISZERO"
    },
    "4326": {
      "op": "PUSH2",
      "value": "0x10EE"
    },
    "4329": {
      "op": "JUMPI"
    },
    "4330": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4332": {
      "op": "DUP1"
    },
    "4333": {
      "op": "REVERT"
    },
    "4334": {
      "op": "JUMPDEST"
    },
    "4335": {
      "op": "PUSH2",
      "value": "0x10FA"
    },
    "4338": {
      "op": "DUP9"
    },
    "4339": {
      "op": "DUP4"
    },
    "4340": {
      "op": "DUP10"
    },
    "4341": {
      "op": "ADD"
    },
    "4342": {
      "op": "PUSH2",
      "value": "0xFF5"
    },
    "4345": {
      "jump": "i",
      "op": "JUMP"
    },
    "4346": {
      "op": "JUMPDEST"
    },
    "4347": {
      "op": "SWAP4"
    },
    "4348": {
      "op": "POP"
    },
    "4349": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4351": {
      "op": "DUP8"
    },
    "4352": {
      "op": "ADD"
    },
    "4353": {
      "op": "CALLDATALOAD"
    },
    "4354": {
      "op": "SWAP2"
    },
    "4355": {
      "op": "POP"
    },
    "4356": {
      "op": "DUP1"
    },
    "4357": {
      "op": "DUP3"
    },
    "4358": {
      "op": "GT"
    },
    "4359": {
      "op": "ISZERO"
    },
    "4360": {
      "op": "PUSH2",
      "value": "0x1110"
    },
    "4363": {
      "op": "JUMPI"
    },
    "4364": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4366": {
      "op": "DUP1"
    },
    "4367": {
      "op": "REVERT"
    },
    "4368": {
      "op": "JUMPDEST"
    },
    "4369": {
      "op": "POP"
    },
    "4370": {
      "op": "PUSH2",
      "value": "0x111D"
    },
    "4373": {
      "op": "DUP8"
    },
    "4374": {
      "op": "DUP3"
    },
    "4375": {
      "op": "DUP9"
    },
    "4376": {
      "op": "ADD"
    },
    "4377": {
      "op": "PUSH2",
      "value": "0xFF5"
    },
    "4380": {
      "jump": "i",
      "op": "JUMP"
    },
    "4381": {
      "op": "JUMPDEST"
    },
    "4382": {
      "op": "SWAP2"
    },
    "4383": {
      "op": "POP"
    },
    "4384": {
      "op": "POP"
    },
    "4385": {
      "op": "SWAP3"
    },
    "4386": {
      "op": "SWAP6"
    },
    "4387": {
      "op": "SWAP2"
    },
    "4388": {
      "op": "SWAP5"
    },
    "4389": {
      "op": "POP"
    },
    "4390": {
      "op": "SWAP3"
    },
    "4391": {
      "op": "POP"
    },
    "4392": {
      "jump": "o",
      "op": "JUMP"
    },
    "4393": {
      "op": "JUMPDEST"
    },
    "4394": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4396": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4398": {
      "op": "DUP3"
    },
    "4399": {
      "op": "DUP5"
    },
    "4400": {
      "op": "SUB"
    },
    "4401": {
      "op": "SLT"
    },
    "4402": {
      "op": "ISZERO"
    },
    "4403": {
      "op": "PUSH2",
      "value": "0x113B"
    },
    "4406": {
      "op": "JUMPI"
    },
    "4407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4409": {
      "op": "DUP1"
    },
    "4410": {
      "op": "REVERT"
    },
    "4411": {
      "op": "JUMPDEST"
    },
    "4412": {
      "op": "PUSH2",
      "value": "0x90D"
    },
    "4415": {
      "op": "DUP3"
    },
    "4416": {
      "op": "PUSH2",
      "value": "0xCC7"
    },
    "4419": {
      "jump": "i",
      "op": "JUMP"
    },
    "4420": {
      "op": "JUMPDEST"
    },
    "4421": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4426": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4428": {
      "op": "SHL"
    },
    "4429": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4431": {
      "op": "MSTORE"
    },
    "4432": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4434": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4436": {
      "op": "MSTORE"
    },
    "4437": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4439": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4441": {
      "op": "REVERT"
    },
    "4442": {
      "op": "JUMPDEST"
    },
    "4443": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4445": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4447": {
      "op": "NOT"
    },
    "4448": {
      "op": "DUP3"
    },
    "4449": {
      "op": "EQ"
    },
    "4450": {
      "op": "ISZERO"
    },
    "4451": {
      "op": "PUSH2",
      "value": "0x117C"
    },
    "4454": {
      "op": "JUMPI"
    },
    "4455": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4460": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4462": {
      "op": "SHL"
    },
    "4463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4465": {
      "op": "MSTORE"
    },
    "4466": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4468": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4470": {
      "op": "MSTORE"
    },
    "4471": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4475": {
      "op": "REVERT"
    },
    "4476": {
      "op": "JUMPDEST"
    },
    "4477": {
      "op": "POP"
    },
    "4478": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4480": {
      "op": "ADD"
    },
    "4481": {
      "op": "SWAP1"
    },
    "4482": {
      "jump": "o",
      "op": "JUMP"
    },
    "4483": {
      "op": "JUMPDEST"
    },
    "4484": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4486": {
      "op": "DUP3"
    },
    "4487": {
      "op": "MLOAD"
    },
    "4488": {
      "op": "PUSH2",
      "value": "0x1195"
    },
    "4491": {
      "op": "DUP2"
    },
    "4492": {
      "op": "DUP5"
    },
    "4493": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4495": {
      "op": "DUP8"
    },
    "4496": {
      "op": "ADD"
    },
    "4497": {
      "op": "PUSH2",
      "value": "0xF58"
    },
    "4500": {
      "jump": "i",
      "op": "JUMP"
    },
    "4501": {
      "op": "JUMPDEST"
    },
    "4502": {
      "op": "SWAP2"
    },
    "4503": {
      "op": "SWAP1"
    },
    "4504": {
      "op": "SWAP2"
    },
    "4505": {
      "op": "ADD"
    },
    "4506": {
      "op": "SWAP3"
    },
    "4507": {
      "op": "SWAP2"
    },
    "4508": {
      "op": "POP"
    },
    "4509": {
      "op": "POP"
    },
    "4510": {
      "jump": "o",
      "op": "JUMP"
    },
    "4511": {
      "op": "JUMPDEST"
    },
    "4512": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4514": {
      "op": "DUP2"
    },
    "4515": {
      "op": "DUP2"
    },
    "4516": {
      "op": "SHR"
    },
    "4517": {
      "op": "SWAP1"
    },
    "4518": {
      "op": "DUP3"
    },
    "4519": {
      "op": "AND"
    },
    "4520": {
      "op": "DUP1"
    },
    "4521": {
      "op": "PUSH2",
      "value": "0x11B3"
    },
    "4524": {
      "op": "JUMPI"
    },
    "4525": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "4527": {
      "op": "DUP3"
    },
    "4528": {
      "op": "AND"
    },
    "4529": {
      "op": "SWAP2"
    },
    "4530": {
      "op": "POP"
    },
    "4531": {
      "op": "JUMPDEST"
    },
    "4532": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4534": {
      "op": "DUP3"
    },
    "4535": {
      "op": "LT"
    },
    "4536": {
      "op": "DUP2"
    },
    "4537": {
      "op": "EQ"
    },
    "4538": {
      "op": "ISZERO"
    },
    "4539": {
      "op": "PUSH2",
      "value": "0x11D4"
    },
    "4542": {
      "op": "JUMPI"
    },
    "4543": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4548": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4550": {
      "op": "SHL"
    },
    "4551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4553": {
      "op": "MSTORE"
    },
    "4554": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "4556": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4558": {
      "op": "MSTORE"
    },
    "4559": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4561": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4563": {
      "op": "REVERT"
    },
    "4564": {
      "op": "JUMPDEST"
    },
    "4565": {
      "op": "POP"
    },
    "4566": {
      "op": "SWAP2"
    },
    "4567": {
      "op": "SWAP1"
    },
    "4568": {
      "op": "POP"
    },
    "4569": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "639021c460a16ca45c0abc0fe22fbb5bda011ada",
  "source": "// SPDX-License-Identifier: MIT\n\n// This contract will allow you to setup your user account to either be an uploader and downloadedr and cloud storage user (NRO user), service provider for storage, cloud or both (AWS)\n// Users should belong to an organization. * Can implement different coins to allow you to authenticate to a group. * Service providers do not need to belong to an organization for now\n// Authentication should be occuring throughout. Once your account is established correctly you should only be able to click the link for the page you will be allowed to use.\n// There will be different contracts once you enter a link. \n\npragma solidity >=0.6.0 <0.9.0;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract DetermineUser is Ownable{\n\n    address[] _privateKeyNRO; address[] _privateKeyNSA; address[] _privateKeyCIA; address[] _privateKeyAWS;\n    constructor(address[] memory privateKeyNRO,address[] memory privateKeyCIA,address[] memory privateKeyNSA,address[] memory privateKeyAWS) { // extend this for user type and orgname, should be a list of numbers\n\n        _privateKeyNRO = privateKeyNRO;\n        _privateKeyNSA = privateKeyNSA;\n        _privateKeyCIA = privateKeyCIA;\n        _privateKeyAWS = privateKeyAWS;\n    }\n\n    enum OrgName{ None, NRO, NSA, CIA, AWS }\n    OrgName _orgName;\n\n    enum UserType{ None, User,ProviderStorage, ProviderCloud, ProviderBoth}\n    UserType _userType;\n\n    struct People {\n        string name;\n        UserType yourUserType;\n        OrgName organization;\n    }\n    \n    People[] public people;\n    mapping(string => UserType) public nameToUserType;\n    mapping(string => OrgName) public nameToOrganization;\n    mapping(OrgName => address[]) public orgnameToKey;\n    \n    function createMapping() public { //must be called in order for contract to run, should be only owner but its not for testing purposes\n        orgnameToKey[OrgName.NRO]= _privateKeyNRO;\n        orgnameToKey[OrgName.NSA]= _privateKeyNSA;\n        orgnameToKey[OrgName.CIA]= _privateKeyCIA;\n        orgnameToKey[OrgName.AWS]= _privateKeyAWS;\n        \n    }\n\n    // if owner wants to change private keys after contract is deployed, removes and inserts entire new list if you set to = instead of push, consider adding function to remove keys as well\n    function changePrivateKeys(address[] memory _newprivateKeyNRO,address[] memory _newprivateKeyCIA,address[] memory _newprivateKeyNSA,address[] memory _newprivateKeyAWS) public { //should be only owner but its not for testing purposes\n        //_privateKeyNRO = _newprivateKeyNRO\n        for (uint i=0; i<_newprivateKeyNRO.length; i++) {\n            _privateKeyNRO.push(_newprivateKeyNRO[i]);\n        }\n         //_privateKeyNSA = _newprivateKeyNSA\n        for (uint i=0; i<_newprivateKeyNSA.length; i++) {\n            _privateKeyNSA.push(_newprivateKeyNSA[i]);\n        }\n        //_privateKeyCIA = _newprivateKeyCIA\n        for (uint i=0; i<_newprivateKeyCIA.length; i++) {\n            _privateKeyCIA.push(_newprivateKeyCIA[i]);\n        }\n        //_privateKeyAWS= _newprivateKeyAWS\n        for (uint i=0; i<_newprivateKeyAWS.length; i++) {\n            _privateKeyAWS.push(_newprivateKeyAWS[i]);\n        }\n        createMapping();\n    }\n\n   \n\n    function checkOrgList(address usersPrivateKey,  OrgName selectionNumOrg) public view returns(bool){//checks if number is in list and list is based on organization chosen\n        bool result;\n        result= false;\n        if (selectionNumOrg==OrgName.None) {result=true;}\n        //wont go through the loop anyway if orgname is none\n        for (uint j = 0; j < orgnameToKey[selectionNumOrg].length; j++) {\n            if (orgnameToKey[selectionNumOrg][j]==usersPrivateKey){result=true;break;} else {result=false;} \n        }\n        return result;\n\n    }\n    function checkTypeList(OrgName selectionNumOrg, UserType selectionNumType) public pure returns(bool){ // ensure that only certain organizations can be determined as a specific type etc.\n        bool result;\n        result= false;\n\n        if ((selectionNumOrg==OrgName.NRO || selectionNumOrg==OrgName.NSA || selectionNumOrg==OrgName.CIA) && selectionNumType==UserType.User){result=true;\n        } else if (selectionNumOrg==OrgName.AWS && selectionNumType==UserType.ProviderBoth) {result=true;\n        } else if (selectionNumOrg==OrgName.None && (selectionNumType==UserType.ProviderCloud || selectionNumType==UserType.ProviderStorage || selectionNumType==UserType.None)){result=true;\n        } else {result=false;}\n        \n        return result;\n\n    }\n     // modifier to check whether your private key has authorization to a specific user type. \n\n\n    modifier onlyCertainKeys(address usersPrivateKey, UserType selectionNumType, OrgName selectionNumOrg) { \n\n        require(checkOrgList(usersPrivateKey, selectionNumOrg), 'You cant do this');\n        require(checkTypeList(selectionNumOrg, selectionNumType), 'You cant do this');\n        _;\n\n    }\n\n    function people_list() public view returns (address[] memory) { //A list of users\n        return _privateKeyNRO;\n    }\n\n    // add a person to an organization and determine the type of user.\n    function addPerson( string memory _name,  UserType selectionNumType, OrgName selectionNumOrg) public onlyCertainKeys(msg.sender, selectionNumType, selectionNumOrg) {\n        // Check whether user is authorized to the organization and user type by using their private key and authenticating in the two seperate functions\n\n        people.push(People( _name, selectionNumType, selectionNumOrg));\n        nameToOrganization[_name]= _orgName;\n        nameToUserType[_name]= _userType;\n    }\n\n\n    // only owner can authenticate a key because the contract deployment process and the changePrivateKeys function\n    // if i implement an automatic payment to user type in here than the same owner would have to be for both contracts and i would have to increase allowance everytime someone is added anyway.\n    \n    \n\n}\n",
  "sourceMap": "726:5227:2:-:0;;;874:375;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:0;719:10:1;921:18:0;:32::i;:::-;1092:30:2;;;;:14;;:30;;;;;:::i;:::-;-1:-1:-1;1132:30:2;;;;:14;;:30;;;;;:::i;:::-;-1:-1:-1;1172:30:2;;;;:14;;:30;;;;;:::i;:::-;-1:-1:-1;1212:30:2;;;;:14;;:30;;;;;:::i;:::-;;874:375;;;;726:5227;;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;726:5227:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;726:5227:2;-1:-1:-1;;;;;726:5227:2;;;;;;;;;;;-1:-1:-1;726:5227:2;;;;;;;-1:-1:-1;726:5227:2;;;-1:-1:-1;726:5227:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:4;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:177;225:13;;-1:-1:-1;;;;;267:31:4;;257:42;;247:70;;313:1;310;303:12;247:70;146:177;;;:::o;328:923::-;393:5;446:3;439:4;431:6;427:17;423:27;413:55;;464:1;461;454:12;413:55;487:13;;519:4;-1:-1:-1;;;;;572:10:4;;;569:36;;;585:18;;:::i;:::-;631:2;628:1;624:10;663:2;657:9;726:2;722:7;717:2;713;709:11;705:25;697:6;693:38;781:6;769:10;766:22;761:2;749:10;746:18;743:46;740:72;;;792:18;;:::i;:::-;828:2;821:22;878:18;;;954:15;;;950:24;;;912:15;;;;-1:-1:-1;986:15:4;;;983:35;;;1014:1;1011;1004:12;983:35;1050:2;1042:6;1038:15;1027:26;;1062:159;1078:6;1073:3;1070:15;1062:159;;;1144:34;1174:3;1144:34;:::i;:::-;1132:47;;1199:12;;;;1095;;;;1062:159;;;1239:6;328:923;-1:-1:-1;;;;;;;328:923:4:o;1256:1075::-;1453:6;1461;1469;1477;1530:3;1518:9;1509:7;1505:23;1501:33;1498:53;;;1547:1;1544;1537:12;1498:53;1574:16;;-1:-1:-1;;;;;1639:14:4;;;1636:34;;;1666:1;1663;1656:12;1636:34;1689:72;1753:7;1744:6;1733:9;1729:22;1689:72;:::i;:::-;1679:82;;1807:2;1796:9;1792:18;1786:25;1770:41;;1836:2;1826:8;1823:16;1820:36;;;1852:1;1849;1842:12;1820:36;1875:74;1941:7;1930:8;1919:9;1915:24;1875:74;:::i;:::-;1865:84;;1995:2;1984:9;1980:18;1974:25;1958:41;;2024:2;2014:8;2011:16;2008:36;;;2040:1;2037;2030:12;2008:36;2063:74;2129:7;2118:8;2107:9;2103:24;2063:74;:::i;:::-;2053:84;;2183:2;2172:9;2168:18;2162:25;2146:41;;2212:2;2202:8;2199:16;2196:36;;;2228:1;2225;2218:12;2196:36;;2251:74;2317:7;2306:8;2295:9;2291:24;2251:74;:::i;:::-;2241:84;;;1256:1075;;;;;;;:::o;:::-;726:5227:2;;;;;;",
  "sourcePath": "contracts/DetermineUser.sol",
  "type": "contract"
}